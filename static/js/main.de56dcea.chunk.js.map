{"version":3,"sources":["content/styles/Registration.module.css","content/styles/Profile.module.css","common/SuperInputText/SuperInputText.module.css","content/styles/Login.module.css","content/styles/Recover.module.css","common/SuperButton/SuperButton.module.css","common/styles/NavbarItem.module.css","common/SuperCheckbox/SuperCheckbox.module.css","common/loader/loader.module.css","App.module.css","common/styles/Navbar.module.css","common/images/default_avatar.png","api/authAPI.ts","redux/app-reducer.ts","redux/auth-reducer.ts","content/Profile.tsx","common/SuperButton/SuperButton.tsx","common/SuperInputText/SuperInputText.tsx","content/Registration.tsx","common/NavbarItem.tsx","common/Navbar.tsx","common/SuperCheckbox/SuperCheckbox.tsx","content/SuperInputsDemo.tsx","common/inputValidator.ts","content/Login/Login.tsx","content/Login/LoginContainer.tsx","content/Recover/RecoverTimer.tsx","content/Recover/Recover.tsx","redux/recover-reducer.ts","content/Recover/RecoverContainer.tsx","content/NewPassword/NewPassword.tsx","content/NewPassword/NewPasswordContainer.tsx","common/loader/loader.svg","common/loader/loader.tsx","App.tsx","reportWebVitals.ts","redux/password-reducer.ts","redux/profile-reducer.ts","redux/registration-reducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","authAPI","post","email","password","rememberMe","delete","from","message","resetPasswordToken","initialState","status","isInitialized","SET_APP_STATUS","setAppStatusAC","type","isLoggedIn","profile","setIsLoggedInAC","setProfileAC","logOutTC","dispatch","then","response","catch","e","console","log","finally","Profile","useDispatch","useSelector","state","auth","profileData","data","className","style","avatar","src","alt","width","height","defaultAvatar","name","packsCount","publicCardPacksCount","onClick","to","SuperButton","red","restProps","finalClassName","s","default","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","title","finalSpanClassName","finalInputClassName","errorInput","superInput","inputItem","currentTarget","value","key","inputErrorMessageArea","password1","password2","errorResponse","successfullyRegistered","Registration","useState","setState","emailError","pw1Error","pw2Error","handleSignUp","alert","res","addedUser","setSuccessfulRegistration","val","form","registrationErrorMessage","green","NavbarItem","props","item","activeClassName","activeLink","Navbar","navbar","SuperCheckbox","onChangeChecked","children","checkbox","checked","SuperInputsDemo","text","setText","showAlert","setChecked","demoContainer","inputValidator","test","Login","formState","onChangeHandler","onBlurHandler","checkBoxHandler","onSubmitHandler","disableSubmit","globalFormError","onBlur","placeholder","disabled","LoginContainer","touched","setFormState","field","trim","target","login","logInTC","RecoverTimer","timerID","timeMs","getTime","this","setInterval","tick","ms","seconds","Math","floor","clearInterval","showTimer","convertMsToTime","timer","time","React","Component","Recover","timerIsActive","timerContainer","lastLinkTimestamp","setRecoverLinkTimestampAC","localStorage","timerData","setItem","RecoverContainer","Number","Date","valueOf","recoverPasswordTC","NewPassword","formError","confirm","NewPasswordContainer","params","useParams","token","setNewPasswordTC","Loader","dimScreen","loader","App","appStatus","appState","useEffect","content","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","pagePassword","pageProfile","pageRecover","pageRegistration","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de56dcea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Registration_form__jtTlg\",\"registrationErrorMessage\":\"Registration_registrationErrorMessage__1kz7v\",\"demoContainer\":\"Registration_demoContainer__iUtpv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__18LY6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputItem\":\"SuperInputText_inputItem__3wSqk\",\"superInput\":\"SuperInputText_superInput__2y9o7\",\"errorInput\":\"SuperInputText_errorInput__1Tk9e\",\"error\":\"SuperInputText_error__1l5Oe\",\"inputErrorMessageArea\":\"SuperInputText_inputErrorMessageArea__1dWI0\",\"title\":\"SuperInputText_title__2upz8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__32Fyg\",\"rememberMe\":\"Login_rememberMe__dRVr8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Recover_form__DGr-v\",\"timer\":\"Recover_timer__2fP7Q\",\"timerContainer\":\"Recover_timerContainer__20gB8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1H4I9\",\"red\":\"SuperButton_red__1KP2a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeLink\":\"NavbarItem_activeLink__3JfRL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__7ru_C\",\"spanClassName\":\"SuperCheckbox_spanClassName__3VuGm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dimScreen\":\"loader_dimScreen__Ia0cI\",\"loader\":\"loader_loader__3hg5M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3lkBD\",\"content\":\"App_content__XgHZo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2UpRR\",\"navbarItem\":\"Navbar_navbarItem__34Lgs\"};","export default __webpack_public_path__ + \"static/media/default_avatar.b82381d7.png\";","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    headers: {\r\n\r\n    }\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post('/auth/me')\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post('/auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n      return instance.delete('/auth/me')\r\n    },\r\n    forgot(email: string, from: string, message: string) {\r\n        return instance.post('/auth/forgot', {email, from, message})\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post('/auth/set-new-password', {password, resetPasswordToken})\r\n    },\r\n    registerUser(email:string,password:string) {\r\n        return  instance.post('/auth/register', {email, password})\r\n    },\r\n}","\r\nexport type InitialStateType = {\r\n    status: AppStatusType\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    isInitialized: false\r\n}\r\nexport type AppStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setAppStatusAC>\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_APP_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst SET_APP_STATUS = 'SET-APP-STATUS'\r\n\r\nexport const setAppStatusAC = (status: AppStatusType) => ({\r\n        type: SET_APP_STATUS,\r\n        status\r\n    }\r\n)","import store from './store';\r\nimport {authAPI} from '../api/authAPI';\r\nimport {setAppStatusAC} from './app-reducer';\r\n\r\ntype PageStateType = {\r\n    isLoggedIn: boolean\r\n    profile: AuthProfileType | null\r\n}\r\n\r\nconst initialState: PageStateType = {\r\n    isLoggedIn: false,\r\n    profile: null\r\n}\r\n\r\nexport type AuthProfileType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error?: string;\r\n}\r\n\r\nexport type DispatchType = typeof store.dispatch\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setProfileAC>\r\n\r\nexport const authReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n\r\n        case 'SET-PROFILE':\r\n            return {...state, profile: action.profile}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst SET_IS_LOGGED_IN = 'SET-IS-LOGGED-IN'\r\nconst SET_PROFILE = 'SET-PROFILE'\r\n\r\nconst setIsLoggedInAC = (isLoggedIn: boolean) => ({\r\n        type: SET_IS_LOGGED_IN,\r\n        isLoggedIn\r\n    } as const\r\n)\r\n\r\nconst setProfileAC = (profile: AuthProfileType) => ({\r\n    type: SET_PROFILE,\r\n    profile\r\n}) as const\r\n\r\n// Thunks\r\n\r\nexport const setAuthTC = () => (dispatch: DispatchType) => { // todo\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then((response) => {\r\n            dispatch(setProfileAC(response as unknown as AuthProfileType))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch(e => {\r\n            console.log('Error: ', {...e})\r\n            dispatch(setIsLoggedInAC(false))\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n\r\nexport const logInTC = (login: string, password: string, rememberMe: boolean) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(login, password, rememberMe)\r\n        .then((response) => {\r\n            dispatch(setProfileAC(response as unknown as AuthProfileType)) // todo - wtf ?!\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch(e => console.log('Error: ', {...e}))\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n\r\nexport const logOutTC = () => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(response => {\r\n            dispatch(setIsLoggedInAC(false))\r\n        })\r\n        .catch(e => console.log('Error: ', {...e}))\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.setNewPassword(password, resetPasswordToken)\r\n        .then(response => {\r\n            dispatch(setIsLoggedInAC(false))\r\n        })\r\n        .catch(e => console.log('Error: ', {...e}))\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../redux/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport style from './styles/Profile.module.css'\r\nimport defaultAvatar from '../common/images/default_avatar.png';\r\nimport {logOutTC} from '../redux/auth-reducer';\r\n\r\nfunction Profile() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType): boolean => state.auth.isLoggedIn)\r\n\r\n    const auth = useSelector((state: RootStateType): any => state.auth)\r\n    // const profile = useSelector((state: RootStateType): any => state.pageProfile)\r\n// debugger\r\n    let profileData = null\r\n\r\n    // const p = isLoggedIn && auth.profile? auth.profile.data : null\r\n\r\n    if (isLoggedIn) {\r\n        profileData = auth.profile.data\r\n        // const [userName] = auth.profile.data\r\n\r\n    }\r\n\r\n    const logoutHandler = () => dispatch(logOutTC())\r\n\r\n    // debugger\r\n    return (\r\n        <div>\r\n            <h1 className={style.profile}>\r\n                Profile\r\n            </h1>\r\n            {\r\n                !isLoggedIn\r\n                    ? <Redirect to={'/login'}/>\r\n                    : <div className={style.profileData}>\r\n                        {profileData.avatar ?\r\n                            <div>\r\n                            <img src={profileData.avatar} alt=\"\" width=\"400\" height=\"400\" ></img>\r\n                            <div className={style.avatar}>{profileData.avatar}</div>\r\n                            </div>\r\n                            : <img src={defaultAvatar} alt=\"\" width=\"100\" height=\"100\"/>\r\n\r\n                        }\r\n                        <div className={style.name}>Name: {profileData.name}</div>\r\n                        <div className={style.email}>email: {profileData.email}</div>\r\n                        <div className={style.packsCount}>Public card packs\r\n                            count: {profileData.publicCardPacksCount}</div>\r\n\r\n                        {/*<div className={style.name}>{profile.data.name}</div>*/}\r\n                        {/*<div className={style.name}>{userName}</div>*/}\r\n                        <button onClick={logoutHandler}>Log out</button>\r\n                    </div>\r\n                    // : <div>\r\n                    //     <div>You are not logged in</div>\r\n                    //     <NavLink to={'/login'}>\r\n                    //         <div>Sign in</div>\r\n                    //     </NavLink>\r\n                    //     <NavLink to={'/registration'}>\r\n                    //         <div>Sign up</div>\r\n                    //     </NavLink>\r\n                    // </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором хранится название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<\r\n  ButtonHTMLAttributes<HTMLButtonElement>,\r\n  HTMLButtonElement\r\n>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n  red?: boolean;\r\n};\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = ({\r\n  red,\r\n  className,\r\n  ...restProps // все остальные пропсы попадут в объект restProps, там же будет children\r\n}) => {\r\n  const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n  //console.log(restProps);\r\n  return (\r\n    <button\r\n      className={finalClassName}\r\n      {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n    />\r\n  );\r\n};\r\n\r\nexport default SuperButton;\r\n","import React, {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  InputHTMLAttributes,\r\n  KeyboardEvent\r\n} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<\r\n  InputHTMLAttributes<HTMLInputElement>,\r\n  HTMLInputElement\r\n>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n  // и + ещё пропсы которых нет в стандартном инпуте\r\n  onChangeText?: (value: string) => void;\r\n  onEnter?: () => void;\r\n  error?: string;\r\n  spanClassName?: string;\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = ({\r\n  onChange,\r\n  onChangeText,\r\n  onKeyPress,\r\n  onEnter,\r\n  error,\r\n  className,\r\n  spanClassName,\r\n  title,\r\n  ...restProps // все остальные пропсы попадут в объект restProps\r\n}) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange && onChange(e); // если есть пропс onChange // то передать ему е (поскольку onChange не обязателен)\r\n\r\n    onChangeText && onChangeText(e.currentTarget.value);\r\n  };\r\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    onKeyPress && onKeyPress(e);\r\n\r\n    e.key === \"Enter\" && // если нажата кнопка Enter\r\n    onEnter && // и есть пропс onEnter\r\n      onEnter(); // то вызвать его\r\n  };\r\n  // console.log(className);\r\n  const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n  const finalInputClassName = `${\r\n    error ? s.errorInput : s.superInput\r\n  } ${className}`; // need to fix with (?:) and s.superInput\r\n\r\n  return (\r\n    <div className={s.inputItem}>\r\n      {title && <div className={s.title}>{title}</div>}\r\n      <input\r\n        onChange={onChangeCallback}\r\n        onKeyPress={onKeyPressCallback}\r\n        className={finalInputClassName}\r\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n      />\r\n      <div className={s.inputErrorMessageArea}>\r\n      {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuperInputText;\r\n","import React, {useState} from 'react';\r\nimport SuperButton from '../common/SuperButton/SuperButton';\r\nimport SuperInputText from '../common/SuperInputText/SuperInputText';\r\nimport style from './styles/Registration.module.css'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {authAPI} from '../api/authAPI';\r\n\r\ntype RegistrationPropsType = {\r\n    error?: string\r\n}\r\n\r\ntype StateType = {\r\n    email: string\r\n    password1: string\r\n    password2: string\r\n    errorResponse: string\r\n    successfullyRegistered: boolean\r\n}\r\nconst initialState: StateType = {\r\n    email: \"\",\r\n    password1: \"\",\r\n    password2: \"\",\r\n    errorResponse: \"\",\r\n    successfullyRegistered: false\r\n}\r\n\r\nfunction Registration() {\r\n    const [state, setState] = useState<StateType>(initialState);\r\n    const emailError = state.email ? \"\" : \"Field can't be empty\";\r\n\r\n    const pw1Error = state.password1 ? \"\" : \"Field can't be empty\";\r\n\r\n    const pw2Error = state.password2 ? \"\" : \"Field can't be empty\";\r\n\r\n    const handleSignUp = () => {\r\n        if (emailError) {\r\n            alert(\"Введите текст\");\r\n        } else {\r\n            authAPI.registerUser(state.email, state.password1)\r\n                .then((res: any) => {\r\n                    console.log(`User ${res.data.addedUser.email} successfully signed up`)\r\n                    //setState({...state, errorResponse: error.response.data.error})\r\n                    //return <Redirect to={'/friday_project#/login/'}/>\r\n                    setSuccessfulRegistration(true)\r\n\r\n                })\r\n                .catch((error) => {\r\n                    setState({...state, errorResponse: error.response.data.error})\r\n                })\r\n        }\r\n    };\r\n\r\n    const handleEmail = (val: string) => {\r\n        //alert(val)\r\n        setState({...state, email: val, errorResponse: \"\"})\r\n    }\r\n    const handlePw1 = (val: string) => {\r\n        //alert(val)\r\n        setState({...state, password1: val, errorResponse: \"\"})\r\n    }\r\n    const handlePw2 = (val: string) => {\r\n        // alert(val)\r\n        setState({...state, password2: val, errorResponse: \"\"})\r\n    }\r\n\r\n    const setSuccessfulRegistration = (val: boolean) => {\r\n        setState({...state, successfullyRegistered: val})\r\n    }\r\n\r\n    return (\r\n\r\n        state.successfullyRegistered ?\r\n            <Redirect to={'login'}/>\r\n            :\r\n            <div className={style.form}>\r\n\r\n                <div>\r\n                    Registration\r\n                </div>\r\n                <div className={style.registrationErrorMessage}>\r\n                    {state.errorResponse}\r\n                </div>\r\n                <div>\r\n                    <SuperInputText\r\n                        title={'Email'}\r\n                        value={state.email}\r\n                        onChangeText={handleEmail}\r\n                        onEnter={handleSignUp}\r\n                        error={emailError}\r\n                        className={style.green}\r\n                    />\r\n                    <SuperInputText\r\n                        title={'Password'}\r\n                        value={state.password1}\r\n                        onChangeText={handlePw1}\r\n                        onEnter={handleSignUp}\r\n                        error={pw1Error}\r\n                        className={style.green}\r\n                    />\r\n                    <SuperInputText\r\n                        title={'Password confirmation'}\r\n                        value={state.password2}\r\n                        onChangeText={handlePw2}\r\n                        onEnter={handleSignUp}\r\n                        error={pw2Error}\r\n                        className={style.green}\r\n                    />\r\n\r\n                    <SuperButton\r\n                        red={false} // пропсу с булевым значением не обязательно указывать true\r\n                        onClick={handleSignUp}\r\n                    >\r\n                        Sign up {/*// название кнопки попадёт в children*/}\r\n                    </SuperButton>\r\n\r\n\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Registration;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './styles/NavbarItem.module.css'\r\n\r\ntype NavbarItemPropsType = {\r\n    to: string\r\n    title: string\r\n}\r\n\r\nexport function NavbarItem(props: NavbarItemPropsType) {\r\n    return (\r\n        <div className={style.item}>\r\n            <NavLink to={props.to} activeClassName={style.activeLink}>\r\n                {props.title}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './styles/Navbar.module.css'\r\nimport {NavbarItem} from './NavbarItem';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../redux/store';\r\nimport {logOutTC} from '../redux/auth-reducer';\r\n\r\nexport function Navbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType) => state.auth.isLoggedIn)\r\n    const logout = () => dispatch(logOutTC())\r\n\r\n    return (\r\n        <nav className={style.navbar}>\r\n            {isLoggedIn\r\n                ? <button onClick={logout}>Logout</button>\r\n                : <NavbarItem to='/login' title='Login'/>\r\n            }\r\n            {!isLoggedIn && <NavbarItem to='/registration' title='Registration'/>}\r\n            <NavbarItem to='/profile' title='Profile'/>\r\n            <NavbarItem to='/password' title='Password'/>\r\n            <NavbarItem to='/recover' title='Recover Pass'/>\r\n            <NavbarItem to='/demo' title='Demo'/>\r\n        </nav>\r\n    )\r\n}","import React, {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  InputHTMLAttributes\r\n} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<\r\n  InputHTMLAttributes<HTMLInputElement>,\r\n  HTMLInputElement\r\n>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n  onChangeChecked?: (checked: boolean) => void;\r\n  spanClassName?: string;\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = ({\r\n  type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n  onChange,\r\n  onChangeChecked,\r\n  className,\r\n  spanClassName,\r\n  children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n  ...restProps // все остальные пропсы попадут в объект restProps\r\n}) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    // сделайте так чтоб работал onChange и onChangeChecked\r\n    onChange && onChange(e);\r\n    onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n  };\r\n\r\n  const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n  return (\r\n    <label>\r\n      <input\r\n        type={\"checkbox\"}\r\n        onChange={onChangeCallback}\r\n        className={finalInputClassName}\r\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n      />\r\n      {children && <span className={s.spanClassName}>{children}</span>}\r\n    </label> // благодаря label нажатие на спан передастся в инпут\r\n  );\r\n};\r\n\r\nexport default SuperCheckbox;\r\n","import React, {useState} from 'react';\r\nimport SuperButton from '../common/SuperButton/SuperButton';\r\nimport SuperInputText from '../common/SuperInputText/SuperInputText';\r\nimport SuperCheckbox from '../common/SuperCheckbox/SuperCheckbox';\r\nimport s from './styles/Registration.module.css'\r\n\r\ntype RegistrationPropsType = {\r\n    error?: string\r\n}\r\n\r\nfunction SuperInputsDemo() {\r\n    const [text, setText] = useState<string>(\"\");\r\n    const error = text ? \"\" : \"Field can't be empty\";\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert(\"Введите текст\");\r\n        } else {\r\n            alert(text); // если нет ошибки показать текст\r\n\r\n        }\r\n    };\r\n\r\n    const [checked, setChecked] = useState<boolean>(false);\r\n    // const testOnChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    //     setChecked(e.currentTarget.checked);\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.demoContainer}>\r\n            <h1>\r\n                SuperInputs Demo\r\n            </h1>\r\n            <div>\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                    className={s.green} // проверьте, рабоет ли смешивание классов\r\n                    />\r\n\r\n                <SuperButton\r\n                    red={text===''} // пропсу с булевым значением не обязательно указывать true\r\n                    onClick={showAlert}\r\n                >\r\n                    Button {/*// название кнопки попадёт в children*/}\r\n                </SuperButton>\r\n\r\n                <SuperCheckbox checked={checked} onChangeChecked={setChecked}>\r\n                    CheckboxText {/*// этот текст попадёт в children*/}\r\n                </SuperCheckbox>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SuperInputsDemo;\r\n","\r\nexport type ValidatorFieldType = 'email' | 'password'\r\n\r\nconst inputValidator = (value: string, type: ValidatorFieldType): string => {\r\n    switch (type) {\r\n        case 'email':\r\n            return (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) ? '' : 'Invalid email'\r\n        case 'password':\r\n            return /^[a-zA-Z0-9!@#$%^&*]{6,16}$/i.test(value) ? '' : 'Invalid password'\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nexport default inputValidator","import React from 'react';\r\nimport style from '../styles/Login.module.css'\r\nimport SuperInputText from '../../common/SuperInputText/SuperInputText';\r\nimport SuperCheckbox from '../../common/SuperCheckbox/SuperCheckbox';\r\nimport SuperButton from '../../common/SuperButton/SuperButton';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {LoginFormStateType} from './LoginContainer';\r\nimport {ValidatorFieldType} from '../../common/inputValidator';\r\n\r\ntype LoginPropsType = {\r\n    formState: LoginFormStateType\r\n    onChangeHandler(field: ValidatorFieldType): (value: string) => void\r\n    onBlurHandler(field: ValidatorFieldType): (e: React.FocusEvent<HTMLInputElement>) => void\r\n    checkBoxHandler(rememberMe: boolean): void\r\n    onSubmitHandler(email: string, password: string, rememberMe: boolean): void\r\n}\r\n\r\nfunction Login({formState, onChangeHandler, onBlurHandler, checkBoxHandler, onSubmitHandler}:LoginPropsType) {\r\n    console.log('Login called')\r\n\r\n    const email = formState.email\r\n    const password = formState.password\r\n    const rememberMe = formState.rememberMe\r\n\r\n    const submitForm = () => {onSubmitHandler(email.value, password.value, rememberMe)}\r\n\r\n    const disableSubmit = !!(email.error || password.error || formState.globalFormError)\r\n\r\n    return (\r\n        <form className={style.form}>\r\n            <h1>Sign in</h1>\r\n            <SuperInputText\r\n                value={email.value}\r\n                error={email.error}\r\n                onChangeText={onChangeHandler('email')}\r\n                onBlur={onBlurHandler('email')}\r\n                placeholder={'Email'}\r\n                type={'text'}\r\n            />\r\n            <SuperInputText\r\n                value={password.value}\r\n                error={password.error}\r\n                onChangeText={onChangeHandler('password')}\r\n                onBlur={onBlurHandler('password')}\r\n                placeholder={'Password'}\r\n                type={'password'}\r\n            />\r\n            <NavLink to={'/recover'}><span>Forgot password?</span></NavLink>\r\n            <div className={style.rememberMe}>\r\n                <SuperCheckbox onChangeChecked={checkBoxHandler} checked={rememberMe}/>\r\n                <span>Remember me</span>\r\n            </div>\r\n            <SuperButton disabled={disableSubmit} onClick={submitForm}>Sign in</SuperButton>\r\n            <NavLink to={'/registration'}><span>Registration</span></NavLink>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React, {useState} from 'react';\r\nimport inputValidator from '../../common/inputValidator';\r\nimport Login from './Login';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\nimport {logInTC} from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport type LoginFormStateType = {\r\n    email: InputStateType\r\n    password: InputStateType\r\n    rememberMe: boolean\r\n    globalFormError: string\r\n}\r\n\r\nexport type InputStateType = {\r\n    value: string\r\n    error: string\r\n    touched: boolean\r\n}\r\n\r\nfunction LoginContainer() {\r\n    console.log('LoginContainer called')\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType):boolean => state.auth.isLoggedIn)\r\n\r\n    let [formState, setFormState] = useState<LoginFormStateType>(\r\n        {\r\n            email: {value: '', error: '', touched: false},\r\n            password: {value: '', error: '', touched: false},\r\n            rememberMe: false,\r\n            globalFormError: ''\r\n        })\r\n\r\n    const onChangeHandler = (field: 'email' | 'password') => (value: string) => {\r\n        setFormState({\r\n            ...formState, [field]:\r\n                {\r\n                    ...formState[field],\r\n                    value: value.trim(),\r\n                    error: formState[field].touched ? inputValidator(value, field) : ''\r\n                }\r\n        })\r\n    }\r\n\r\n    const onBlurHandler = (field: 'email' | 'password') => (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setFormState({\r\n            ...formState, [field]:\r\n                {\r\n                    ...formState[field],\r\n                    error: formState[field].value ? inputValidator(e.target.value, field) : 'Required field',\r\n                    touched: true\r\n                }\r\n        })\r\n    }\r\n\r\n    const checkBoxHandler = (rememberMe: boolean) => {\r\n        setFormState({...formState, rememberMe}\r\n        )\r\n    }\r\n\r\n    const onSubmitHandler = (email: string, password: string, rememberMe: boolean) => {\r\n        dispatch(logInTC(email, password, rememberMe))\r\n    }\r\n\r\n    return (\r\n        isLoggedIn ?\r\n            // <h1>redirect to profile</h1>\r\n            <Redirect to={'profile'}/>\r\n            :\r\n            <Login\r\n            formState={formState}\r\n            onChangeHandler={onChangeHandler}\r\n            onBlurHandler={onBlurHandler}\r\n            checkBoxHandler={checkBoxHandler}\r\n            onSubmitHandler={onSubmitHandler}\r\n        />\r\n    )\r\n}\r\n\r\nexport default LoginContainer;\r\n","import React from 'react';\r\nimport style from '../styles/Recover.module.css'\r\n\r\ntype RecoverTimerPropsType = {\r\n    getTime(): number\r\n    showTimer(show: boolean): void\r\n}\r\n\r\ntype RecoverTimerStateType = {\r\n    timeMs: number\r\n}\r\n\r\nclass RecoverTimer extends React.Component<RecoverTimerPropsType, RecoverTimerStateType> {\r\n\r\n    timerID: any\r\n\r\n    constructor(props: RecoverTimerPropsType) {\r\n        super(props);\r\n        this.state = {timeMs: this.props.getTime()};\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('RecoverTimer called')\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    convertMsToTime(ms: number) {\r\n        let minutes = Math.floor(ms / 60000);\r\n        let seconds = ((ms % 60000) / 1000);\r\n        return minutes + ':' + (seconds < 10 ? '0' : '') + Math.floor(seconds)\r\n    }\r\n\r\n    tick() {\r\n        if (this.props.getTime() < 0) {\r\n            clearInterval(this.timerID)\r\n            this.props.showTimer(false)\r\n        } else {\r\n            this.setState({timeMs: this.props.getTime()})\r\n        }\r\n    };\r\n\r\n    time() {\r\n        return this.state.timeMs > 0 ? this.convertMsToTime(this.state.timeMs) : '...'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <span className={style.timer}>\r\n                {`Time till next link: ${this.time()}`}\r\n                </span>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default RecoverTimer;\r\n\r\n","import React, {useState} from 'react';\r\nimport style from '../styles/Recover.module.css'\r\nimport SuperInputText from '../../common/SuperInputText/SuperInputText';\r\nimport {NavLink} from 'react-router-dom';\r\nimport SuperButton from '../../common/SuperButton/SuperButton';\r\nimport {RecoverFormStateType} from './RecoverContainer';\r\nimport RecoverTimer from './RecoverTimer';\r\n\r\ntype RecoverPropsType = {\r\n    formState: RecoverFormStateType\r\n    getTime(): number\r\n    onChangeHandler(value: string): void\r\n    onBlurHandler(e: React.FocusEvent<HTMLInputElement>): void\r\n    onSubmitHandler(email: string): void\r\n}\r\n\r\nconst Recover = ({\r\n                     formState,\r\n                     onChangeHandler,\r\n                     onBlurHandler,\r\n                     onSubmitHandler,\r\n                     getTime\r\n                 }: RecoverPropsType) => {\r\n\r\n    console.log('Recover called')\r\n\r\n    let [timerIsActive, showTimer] = useState(true)\r\n\r\n    const submitForm = () => {\r\n        onSubmitHandler(formState.value)\r\n        showTimer(true)\r\n    }\r\n\r\n    return (\r\n        <form className={style.form}>\r\n            <h1>Recover</h1>\r\n            <SuperInputText\r\n                value={formState.value}\r\n                error={formState.error}\r\n                onChangeText={onChangeHandler}\r\n                onBlur={onBlurHandler}\r\n                placeholder={'Email'}\r\n            />\r\n            <div className={style.timerContainer}>\r\n                {timerIsActive\r\n                    ? <RecoverTimer getTime={getTime} showTimer={showTimer}/>\r\n                    : <SuperButton disabled={!!formState.error} onClick={submitForm}>Send</SuperButton>\r\n                }\r\n            </div>\r\n            <NavLink to={'/login'}><span>Login page</span></NavLink>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Recover;\r\n","import {DispatchType} from './auth-reducer';\r\nimport {authAPI} from '../api/authAPI';\r\n\r\ntype PageStateType = {\r\n    lastLinkTimestamp: number\r\n}\r\n\r\nconst initialState: PageStateType = {\r\n    lastLinkTimestamp: 0,\r\n}\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setRecoverLinkTimestampAC>\r\n\r\nexport const recoverReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SET-RECOVER-LINK-TIMESTAMP':\r\n            state.lastLinkTimestamp = action.timeMs\r\n            return state\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst SET_RECOVER_LINK_TIMESTAMP = 'SET-RECOVER-LINK-TIMESTAMP'\r\n\r\nexport const setRecoverLinkTimestampAC = (timeMs: number) => ({\r\n        type: SET_RECOVER_LINK_TIMESTAMP,\r\n        timeMs\r\n    } as const\r\n)\r\n\r\n// Thunks\r\n// todo - url heroku\r\nexport const recoverPasswordTC = (email: string) => (dispatch: DispatchType) => {\r\n    const from = 'Administrator'\r\n    const message =\r\n        `<div style=\"background-color: lime; padding: 15px\"> password recovery link:\r\n         <a href='http://localhost:3000/#/set-new-password/$token$'>link</a></div>`\r\n    authAPI.forgot(email, from, message)\r\n        .then(response => {\r\n            dispatch(setRecoverLinkTimestampAC(localStorage.timerData = (new Date).valueOf()))\r\n        })\r\n        .catch(e => {\r\n            console.log('Recover Error', e)\r\n        })\r\n}","import React, {useCallback, useState} from 'react';\r\nimport inputValidator from '../../common/inputValidator';\r\nimport Recover from './Recover';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\nimport {recoverPasswordTC, setRecoverLinkTimestampAC} from '../../redux/recover-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport type RecoverFormStateType = {\r\n    value: string\r\n    error: string\r\n    touched: boolean\r\n}\r\n\r\n!localStorage.timerData && localStorage.setItem('timerData', '0')\r\n\r\nfunction RecoverContainer() {\r\n    console.log('RecoverContainer called')\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType): boolean => state.auth.isLoggedIn)\r\n    let [formState, setFormState] =\r\n        useState<RecoverFormStateType>({value: '', error: '', touched: false})\r\n\r\n    // Timer\r\n\r\n    const timerValueMs = 6000\r\n    dispatch(setRecoverLinkTimestampAC(Number(localStorage.timerData)))\r\n    const getTime = () => (Number(localStorage.timerData) + timerValueMs - (new Date).valueOf())\r\n\r\n    // Handlers\r\n\r\n    const onChangeHandler = (value: string) => {\r\n        setFormState({\r\n            ...formState,\r\n            value: value.trim(),\r\n            error: formState.touched ? inputValidator(value, 'email') : ''\r\n        })\r\n    }\r\n\r\n    const onBlurHandler = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setFormState({\r\n            ...formState,\r\n            error: formState.value ? inputValidator(e.target.value, 'email') : 'Required field',\r\n            touched: true\r\n        })\r\n    }\r\n\r\n    const onSubmitHandler = (email: string) => {\r\n        dispatch(recoverPasswordTC(email))\r\n    }\r\n\r\n    // Render\r\n\r\n    return (\r\n        !isLoggedIn // todo\r\n            ? <Redirect to={'/login'}/>\r\n            :\r\n            <Recover\r\n                formState={formState}\r\n                getTime={getTime}\r\n                onChangeHandler={onChangeHandler}\r\n                onBlurHandler={onBlurHandler}\r\n                onSubmitHandler={onSubmitHandler}\r\n            />\r\n    )\r\n}\r\n\r\nexport default RecoverContainer;\r\n","import React from 'react';\r\nimport style from '../styles/Login.module.css'\r\nimport SuperButton from '../../common/SuperButton/SuperButton';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {NewPasswordFormStateType} from './NewPasswordContainer';\r\nimport SuperInputText from '../../common/SuperInputText/SuperInputText';\r\n\r\ntype RecoverPropsType = {\r\n    formState: NewPasswordFormStateType\r\n    onChangeHandler(field: 'password' | 'confirm'): (value: string) => void\r\n    onBlurHandler(field: 'password' | 'confirm'): (e: React.FocusEvent<HTMLInputElement>) => void\r\n    onSubmitHandler(password: string): void\r\n}\r\n\r\nconst NewPassword = ({\r\n                         formState,\r\n                         onChangeHandler,\r\n                         onBlurHandler,\r\n                         onSubmitHandler,\r\n                     }: RecoverPropsType) => {\r\n\r\n    console.log('NewPassword called')\r\n\r\n    const submitForm = () => {\r\n        onSubmitHandler(formState.password.value)\r\n    }\r\n\r\n    const formError = !!(formState.password.error || formState.confirm.error)\r\n\r\n    return (\r\n        <form className={style.form}>\r\n            <h1>New password</h1>\r\n            <SuperInputText\r\n                value={formState.password.value}\r\n                error={formState.password.error}\r\n                onChangeText={onChangeHandler('password')}\r\n                onBlur={onBlurHandler('password')}\r\n                placeholder={'Enter new password'}\r\n                type={'password'}\r\n            />\r\n            <SuperInputText\r\n                value={formState.confirm.value}\r\n                error={formState.confirm.error}\r\n                onChangeText={onChangeHandler('confirm')}\r\n                onBlur={onBlurHandler('confirm')}\r\n                placeholder={'Confirm'}\r\n                type={'password'}\r\n            />\r\n            <SuperButton disabled={formError} onClick={submitForm}>Send</SuperButton>\r\n            <NavLink to={'/login'}><span>Login page</span></NavLink>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewPassword","import React, {useState} from 'react';\r\nimport inputValidator from '../../common/inputValidator';\r\nimport NewPassword from './NewPassword';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\nimport {setNewPasswordTC} from '../../redux/auth-reducer';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\n\r\nexport type NewPasswordFormStateType = {\r\n    password: InputType\r\n    confirm: InputType\r\n}\r\n\r\ntype InputType = {\r\n    value: string\r\n    error: string\r\n    touched: boolean\r\n}\r\n\r\ntype ParamsType = {\r\n    token: string | undefined\r\n}\r\n\r\nfunction NewPasswordContainer() {\r\n    console.log('NewPasswordContainer called')\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType): boolean => state.auth.isLoggedIn)\r\n    const params: ParamsType = useParams()\r\n    const token = params.token ? params.token : ''\r\n\r\n    let [formState, setFormState] = useState<NewPasswordFormStateType>(\r\n        {\r\n            password: {value: '', error: '', touched: false},\r\n            confirm: {value: '', error: '', touched: false}\r\n        })\r\n\r\n    const onChangeHandler = (field: 'password' | 'confirm') => (value: string) => {\r\n        setFormState({\r\n            ...formState, [field]:\r\n                {\r\n                    ...formState[field],\r\n                    value: value.trim(),\r\n                    error: formState[field].touched ? inputValidator(value, 'password') : ''\r\n                }\r\n        })\r\n    }\r\n\r\n    const onBlurHandler = (field: 'password' | 'confirm') => (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setFormState({\r\n            ...formState, [field]:\r\n                {\r\n                    ...formState[field],\r\n                    error: formState[field].value ?\r\n                        inputValidator(e.target.value, 'password') : 'Required field',\r\n                    touched: true\r\n                }\r\n        })\r\n    }\r\n\r\n    const onSubmitHandler = (password: string) => {\r\n        if (formState.password.value !== formState.confirm.value) {\r\n            setFormState({...formState, confirm: {...formState.confirm, error: 'Passwords do not match'}})\r\n        } else {\r\n            dispatch(setNewPasswordTC(password, token))\r\n        }\r\n    }\r\n\r\n    return (\r\n        !isLoggedIn\r\n            ? <Redirect to={'/login'}/>\r\n            :\r\n            <NewPassword\r\n                formState={formState}\r\n                onChangeHandler={onChangeHandler}\r\n                onBlurHandler={onBlurHandler}\r\n                onSubmitHandler={onSubmitHandler}\r\n            />\r\n    )\r\n}\r\n\r\nexport default NewPasswordContainer;\r\n","export default __webpack_public_path__ + \"static/media/loader.b257f2d9.svg\";","import React from 'react'\r\nimport style from './loader.module.css'\r\nimport loader from './loader.svg'\r\n\r\nexport function Loader() {\r\n    return (\r\n        <div className={style.dimScreen}>\r\n            <img className={style.loader}\r\n                 src={loader}\r\n                 alt=\"Loading...\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport style from './App.module.css';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport Profile from './content/Profile';\r\nimport Registration from './content/Registration';\r\nimport {Navbar} from './common/Navbar';\r\nimport SuperInputsDemo from './content/SuperInputsDemo';\r\nimport LoginContainer from './content/Login/LoginContainer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport RecoverContainer from './content/Recover/RecoverContainer';\r\nimport NewPasswordContainer from './content/NewPassword/NewPasswordContainer';\r\nimport {setAuthTC} from './redux/auth-reducer';\r\nimport {RootStateType} from './redux/store';\r\nimport {Loader} from './common/loader/loader';\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const appStatus = useSelector((state: RootStateType) => state.appState.status) // todo - перерисовка?\r\n    const isLoggedIn = useSelector((state: RootStateType) => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setAuthTC())\r\n    }, [])\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                {appStatus === 'loading' && <Loader/>}\r\n                <Navbar/>\r\n                <div className={style.content}>\r\n                    <Route path='/login' render={() => <LoginContainer/>}/>\r\n                    <Route path='/registration' render={() => <Registration/>}/>\r\n                    <Route path='/profile' render={() => <Profile/>}/>\r\n                    <Route path='/recover' render={() => <RecoverContainer/>}/>\r\n                    <Route path='/password/:token?' render={() => <NewPasswordContainer/>}/>\r\n                    <Route path='/demo' render={() => <SuperInputsDemo/>}/>\r\n                </div>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","type PageStateType = {}\r\n\r\nconst initialState: PageStateType = {}\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof someAC>\r\n\r\nexport const passwordReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SOME-ACTION':\r\n            return {\r\n                ...state,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst SOME_ACTION = 'SOME-ACTION'\r\n\r\nconst someAC = () => ({\r\n        type: SOME_ACTION\r\n    } as const\r\n)","type PageStateType = any\r\n\r\nconst initialState: PageStateType = {}\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof someAC>\r\n\r\nexport const profileReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SOME-ACTION':\r\n            return {\r\n                ...state,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst SOME_ACTION = 'SOME-ACTION'\r\n\r\nconst someAC = () => ({\r\n        type: SOME_ACTION\r\n    } as const\r\n)","type PageStateType = {}\r\n\r\nconst initialState: PageStateType = {}\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof someAC>\r\n\r\nexport const registrationReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SOME-ACTION':\r\n            return {\r\n                ...state,\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst SOME_ACTION = 'SOME-ACTION'\r\n\r\nconst someAC = () => ({\r\n        type: SOME_ACTION\r\n    } as const\r\n)","import { applyMiddleware, combineReducers, createStore } from \"redux\"\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {authReducer} from './auth-reducer';\r\nimport {passwordReducer} from './password-reducer';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {recoverReducer} from './recover-reducer';\r\nimport {registrationReducer} from './registration-reducer';\r\nimport {appReducer} from './app-reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    appState: appReducer,\r\n    auth: authReducer,\r\n    pagePassword: passwordReducer,\r\n    pageProfile: profileReducer,\r\n    pageRecover: recoverReducer,\r\n    pageRegistration: registrationReducer\r\n})\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}