{"version":3,"sources":["content/styles/Login.module.css","content/styles/PacksPage.module.css","common/SuperInputText/SuperInputText.module.css","content/styles/Registration.module.css","content/styles/Profile.module.css","content/styles/Recover.module.css","content/styles/CardsPage.module.css","common/styles/NavbarItem.module.css","common/SuperButton/SuperButton.module.css","common/SuperCheckbox/SuperCheckbox.module.css","common/SearchComponent/SearchComponent.module.css","common/loader/loader.module.css","App.module.css","common/styles/Navbar.module.css","common/styles/PaginationDisplay.module.css","common/Sort/SortDisplay.module.css","content/styles/Page404.module.css","common/images/default_avatar.png","api/API.ts","redux/app-reducer.ts","redux/auth-reducer.ts","content/Profile/Profile.tsx","common/NavbarItem.tsx","common/Navbar.tsx","common/SuperButton/SuperButton.tsx","common/SuperInputText/SuperInputText.tsx","common/SuperCheckbox/SuperCheckbox.tsx","common/SearchComponent/SearchComponent.tsx","redux/search-reducer.ts","common/SearchComponent/SearchContainer.tsx","common/Pagination/PaginationDisplay.tsx","redux/pagination-reducer.ts","common/Pagination/PaginationContainer.tsx","common/Sort/SortDisplay.tsx","common/Sort/SortContainer.tsx","content/SuperInputsDemo.tsx","common/inputValidator.ts","content/Login/Login.tsx","content/Login/LoginContainer.tsx","content/Recover/RecoverTimer.tsx","redux/recover-reducer.ts","content/Recover/Recover.tsx","content/Recover/RecoverContainer.tsx","content/NewPassword/NewPassword.tsx","content/NewPassword/NewPasswordContainer.tsx","common/loader/loader.svg","common/loader/loader.tsx","content/Registration/Registration2.tsx","common/registrationInputValidator.ts","redux/registration-reducer.ts","content/Registration/RegistrationContainer.tsx","content/CardsPage/CardItem.tsx","content/CardsPage/CardsPage.tsx","redux/cards-reducer.ts","content/CardsPage/CardsPageContainer.tsx","content/PacksPage/PackItem.tsx","content/PacksPage/PacksPage.tsx","redux/packs-reducer.ts","content/PacksPage/PacksPageContainer.tsx","content/Page404/Page404.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","API","post","then","response","data","email","password","rememberMe","delete","from","message","resetPasswordToken","packsAPI","params","get","name","cardsPack","id","newName","put","_id","cardsAPI","card","question","initialState","status","isInitialized","SET_APP_STATUS","setAppStatusAC","type","SET_IS_LOGGED_IN","SET_PROFILE","isLoggedIn","profile","setIsLoggedInAC","setProfileAC","setAuthTC","dispatch","catch","e","console","log","finally","logOutTC","Profile","useDispatch","useSelector","state","auth","profileData","className","style","avatar","src","alt","width","height","defaultAvatar","packsCount","publicCardPacksCount","onClick","to","NavbarItem","props","item","activeClassName","activeLink","title","Navbar","navbar","SuperButton","red","restProps","finalClassName","s","default","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","finalInputClassName","errorInput","superInput","inputItem","currentTarget","value","key","inputErrorMessageArea","SuperCheckbox","onChangeChecked","children","checkbox","checked","SearchComponent","onChangeHandler","onSubmitHandler","searchComponent","input","target","onBlur","placeholder","SET_SEARCH_VALUE","searchValue","SearchContainer","useState","searchState","setSearchState","payload","useEffect","PaginationDisplay","currentPage","totalItems","itemsOnPage","getPage","getItemsOnPage","pages","lastPage","Math","ceil","i","push","background","undefined","main","Number","SET_CURRENT_PAGE","SET_ITEMS_ON_PAGE","page","pageCount","setCurrentPageAC","setItemsOnPageAC","PaginationContainer","paginationState","pagination","SortDisplay","SortContainer","SuperInputsDemo","text","setText","showAlert","alert","setChecked","demoContainer","green","inputValidator","test","Login","formState","onBlurHandler","checkBoxHandler","disableSubmit","globalFormError","form","onSubmit","preventDefault","disabled","DEV_MODE","messageDefault","credentialsContainer","credentialsString","credentialsTitle","credentialsValue","DEFAULT_EMAIL","DEFAULT_PASSWORD","LoginContainer","touched","setFormState","field","trim","login","logInTC","RecoverTimer","getTime","hideTimer","timeMs","setTimeMs","timerID","setInterval","clearInterval","timer","ms","seconds","floor","convertMsToTime","timerIsOn","TOGGLE_TIMER_STATUS","toggleTimerAC","Recover","localStorage","timerData","Date","now","pageRecover","timerContainer","setItem","RecoverContainer","baseUrl","window","location","origin","recoverPasswordTC","NewPassword","formError","confirm","NewPasswordContainer","useParams","token","history","replaceState","setNewPasswordTC","Loader","dimScreen","loader","Registration2","registrationFormState","password2","errorResponse","stopPropagation","registrationErrorMessage","registrationInputValidator","password1","SET_SUCCESSFULLY_REGISTERED","isSuccessfullyRegistered","setSuccessfullyRegisteredAC","successfullyRegistered","RegistrationContainer","pageRegistration","setRegistrationFormState","registrationTC","CardItem","myId","itemIsMine","user_id","updated","toLocaleDateString","hour12","hour","minute","created","packItem","itemIsNotMine","answer","round","grade","EPSILON","fontSize","deleteCallback","marginLeft","updateCallback","CardsPage","filter","pack","packsPage","packs","find","p","packId","cards","c","includes","map","deleteCard","updateCard","packsPageWrapper","alignSelf","display","flexDirection","justifyContent","marginBottom","totalCardsCount","table","tableHeader","createCard","packTitle","itemsPerPage","sortCards","getCardsTC","getState","cardsTotalCount","CardsPageContainer","cardsPage","pagesCount","cardsPack_id","createCardTC","cardId","deleteCardTC","update","updateCardTC","PackItem","cardsCount","color","user_name","PacksPage","hide","isMine","setIsMine","toggleHideInput","packsRender","deletePack","updatePack","totalPacksCount","inputBlock","createPack","sortPacks","getPacksTC","cardPacks","cardPacksTotalCount","PacksPageContainer","createPackTC","deletePackTC","updatePackTC","Page404","page404","App","appStatus","appState","content","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","composeEnhancers","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a89257c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__32Fyg\",\"rememberMe\":\"Login_rememberMe__dRVr8\",\"messageDefault\":\"Login_messageDefault__3l_EJ\",\"credentialsContainer\":\"Login_credentialsContainer__R7oM-\",\"credentialsString\":\"Login_credentialsString__5M3DA\",\"credentialsTitle\":\"Login_credentialsTitle__2-ZDZ\",\"credentialsValue\":\"Login_credentialsValue__jIh4G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packsPageWrapper\":\"PacksPage_packsPageWrapper__3L10y\",\"table\":\"PacksPage_table__2o7Vh\",\"tableHeader\":\"PacksPage_tableHeader__1YVD1\",\"packItem\":\"PacksPage_packItem__2Kc7J\",\"inputBlock\":\"PacksPage_inputBlock__jV9s_\",\"itemIsNotMine\":\"PacksPage_itemIsNotMine__3-65N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputItem\":\"SuperInputText_inputItem__3wSqk\",\"superInput\":\"SuperInputText_superInput__2y9o7\",\"errorInput\":\"SuperInputText_errorInput__1Tk9e\",\"error\":\"SuperInputText_error__1l5Oe\",\"inputErrorMessageArea\":\"SuperInputText_inputErrorMessageArea__1dWI0\",\"title\":\"SuperInputText_title__2upz8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Registration_form__jtTlg\",\"registrationErrorMessage\":\"Registration_registrationErrorMessage__1kz7v\",\"demoContainer\":\"Registration_demoContainer__iUtpv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__18LY6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Recover_form__DGr-v\",\"timer\":\"Recover_timer__2fP7Q\",\"timerContainer\":\"Recover_timerContainer__20gB8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packsPageWrapper\":\"CardsPage_packsPageWrapper__2JI5t\",\"table\":\"CardsPage_table__2DQ55\",\"tableHeader\":\"CardsPage_tableHeader__fVl_U\",\"packItem\":\"CardsPage_packItem__3ccLB\",\"inputBlock\":\"CardsPage_inputBlock__1pJDB\",\"itemIsNotMine\":\"CardsPage_itemIsNotMine__vk-Xv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeLink\":\"NavbarItem_activeLink__3JfRL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1H4I9\",\"red\":\"SuperButton_red__1KP2a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__7ru_C\",\"spanClassName\":\"SuperCheckbox_spanClassName__3VuGm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchComponent\":\"SearchComponent_searchComponent__2mC3R\",\"input\":\"SearchComponent_input__P-4tT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dimScreen\":\"loader_dimScreen__Ia0cI\",\"loader\":\"loader_loader__3hg5M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3lkBD\",\"content\":\"App_content__XgHZo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2UpRR\",\"navbarItem\":\"Navbar_navbarItem__34Lgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"PaginationDisplay_main__2kxec\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"SortDisplay_main__SEqVJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page404\":\"Page404_page404__1B52C\"};","export default __webpack_public_path__ + \"static/media/default_avatar.b82381d7.png\";","import axios from 'axios';\r\nimport {GetPacksParamsType} from '../redux/packs-reducer';\r\nimport {GetCardsParamsType} from '../redux/cards-reducer';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    headers: {}\r\n})\r\n\r\nexport const API = {\r\n    me() {\r\n        return instance.post('/auth/me')\r\n            .then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post('/auth/login', {email, password, rememberMe})\r\n            .then(response => response.data)\r\n    },\r\n    logout() {\r\n      return instance.delete('/auth/me')\r\n    },\r\n    forgot(email: string, from: string, message: string) {\r\n        return instance.post('/auth/forgot', {email, from, message})\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post('/auth/set-new-password', {password, resetPasswordToken})\r\n    },\r\n    registration(email:string,password:string) {\r\n        return  instance.post('/auth/register', {email, password})\r\n    },\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: GetPacksParamsType) {\r\n        return instance.get('/cards/pack', {params})\r\n            .then(response => response.data)\r\n    },\r\n    createPack(name: string) {\r\n        return instance.post('/cards/pack', {cardsPack:{name}})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`/cards/pack?id=${id}`)\r\n    },\r\n    updatePack(id: string, newName: string) {\r\n        return instance.put('/cards/pack', {cardsPack:{_id: id, name: newName}})\r\n    }\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(id: string, params: GetCardsParamsType) { // todo - fix params\r\n        return instance.get(`/cards/card?cardsPack_id=${id}`,{params})\r\n    .then(response => response.data)\r\n    },\r\n    createCard(data: CreateCardType) {\r\n        return instance.post('/cards/card', {card: data})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete(`/cards/card?id=${id}`)\r\n    },\r\n    updateCard(id: string) {\r\n        return instance.put('/cards/card', {card:{_id: id, question: 'updated'}})\r\n    }\r\n}\r\n\r\n\r\nexport type GetPacksResponseType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    name: string\r\n    path: string // папка\r\n    cardsCount: number\r\n    grade: number // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: \"pack\" // ещё будет \"folder\" (папка)\r\n    created: string\r\n    updated: string\r\n}\r\n\r\nexport type CreatePackType = { // todo - оранж поля?\r\n    name?: string // если не отправить будет таким\r\n    path?: string // если не отправить будет такой\r\n    grade?: number // не обязателен\r\n    shots?: number // не обязателен\r\n    rating?: number // не обязателен\r\n    deckCover?: string // не обязателен\r\n    private?: boolean // если не отправить будет такой\r\n    type?: string // если не отправить будет таким\r\n}\r\n\r\nexport type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type CreateCardType = {\r\n    answer?: string // если не отправить будет таким\r\n    question?: string // если не отправить будет таким\r\n    cardsPack_id?: string\r\n    grade?: number // 0..5, не обязателен\r\n    rating?: number // не обязателен\r\n    shots?: number // не обязателен\r\n    type?: string // если не отправить будет таким\r\n    answerImg?: string // не обязателен\r\n    questionImg?: string // не обязателен\r\n    questionVideo?: string // не обязателен\r\n    answerVideo?: string // не обязателен\r\n}\r\n\r\nexport type CardsResponseType = {\r\n    cards: CardType[]\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}","\r\nexport type InitialStateType = {\r\n    status: AppStatusType\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    isInitialized: false\r\n}\r\nexport type AppStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setAppStatusAC>\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_APP_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst SET_APP_STATUS = 'SET-APP-STATUS'\r\n\r\nexport const setAppStatusAC = (status: AppStatusType) => ({\r\n        type: SET_APP_STATUS,\r\n        status\r\n    }\r\n)","import store from './store';\r\nimport {API} from '../api/API';\r\nimport {setAppStatusAC} from './app-reducer';\r\n\r\nconst SET_IS_LOGGED_IN = 'SET-IS-LOGGED-IN'\r\nconst SET_PROFILE = 'SET-PROFILE'\r\n\r\ntype PageStateType = {\r\n    isLoggedIn: boolean\r\n    profile: AuthProfileType | null\r\n}\r\n\r\nconst initialState: PageStateType = {\r\n    isLoggedIn: false,\r\n    profile: null\r\n}\r\n\r\nexport type AuthProfileType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error?: string;\r\n}\r\n\r\nexport type DispatchType = typeof store.dispatch\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setProfileAC>\r\n\r\nexport const authReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_IS_LOGGED_IN:\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n\r\n        case SET_PROFILE:\r\n            return {...state, profile: action.profile}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst setIsLoggedInAC = (isLoggedIn: boolean) => ({\r\n        type: SET_IS_LOGGED_IN,\r\n        isLoggedIn\r\n    } as const\r\n)\r\n\r\nconst setProfileAC = (profile: AuthProfileType) => ({\r\n    type: SET_PROFILE,\r\n    profile\r\n}) as const\r\n\r\n// Thunks\r\n\r\nexport const setAuthTC = () => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    API.me()\r\n        .then((response) => {\r\n            dispatch(setProfileAC(response))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch(e => {\r\n            console.log('Error: ', {...e})\r\n            dispatch(setIsLoggedInAC(false))\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n\r\nexport const logInTC = (login: string, password: string, rememberMe: boolean) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    API.login(login, password, rememberMe)\r\n        .then((response) => {\r\n            dispatch(setProfileAC(response))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch(e => console.log('Error: ', {...e}))\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n\r\nexport const logOutTC = () => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    API.logout()\r\n        .then(response => {\r\n            dispatch(setIsLoggedInAC(false))\r\n        })\r\n        .catch(e => console.log('Error: ', {...e}))\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    API.setNewPassword(password, resetPasswordToken)\r\n        .then(response => {\r\n            dispatch(setIsLoggedInAC(false))\r\n        })\r\n        .catch(e => console.log('Error: ', {...e}))\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport style from '../styles/Profile.module.css'\r\nimport defaultAvatar from '../../common/images/default_avatar.png';\r\nimport {AuthProfileType, logOutTC} from '../../redux/auth-reducer';\r\n\r\nfunction Profile() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType): boolean => state.auth.isLoggedIn)\r\n    const profileData = useSelector((state: RootStateType): AuthProfileType | null => state.auth.profile)\r\n\r\n    const logoutHandler = () => dispatch(logOutTC())\r\n\r\n    return (\r\n        <div>\r\n            <h1 className={style.profile}>\r\n                Profile\r\n            </h1>\r\n            {\r\n                isLoggedIn && profileData\r\n                    ? <div className={style.profileData}>\r\n                        {profileData.avatar ?\r\n                            <div>\r\n                            <img src={profileData.avatar} alt=\"\" width=\"100\"  height=\"\"></img>\r\n                            </div>\r\n                            : <img src={defaultAvatar} alt=\"\" width=\"100\" height=\"100\"/>\r\n                        }\r\n                        <div className={style.name}>Name: {profileData.name}</div>\r\n                        <div className={style.email}>email: {profileData.email}</div>\r\n                        <div className={style.packsCount}>Public card packs\r\n                            count: {profileData.publicCardPacksCount}</div>\r\n\r\n                        {/*<div className={style.name}>{profile.data.name}</div>*/}\r\n                        {/*<div className={style.name}>{userName}</div>*/}\r\n                        <button onClick={logoutHandler}>Log out</button>\r\n                    </div>\r\n                    : <Redirect to={'/login'}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './styles/NavbarItem.module.css'\r\n\r\ntype NavbarItemPropsType = {\r\n    to: string\r\n    title: string\r\n}\r\n\r\nexport function NavbarItem(props: NavbarItemPropsType) {\r\n    return (\r\n        <div className={style.item}>\r\n            <NavLink to={props.to} activeClassName={style.activeLink}>\r\n                {props.title}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './styles/Navbar.module.css'\r\nimport {NavbarItem} from './NavbarItem';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../redux/store';\r\nimport {logOutTC} from '../redux/auth-reducer';\r\n\r\nexport function Navbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType) => state.auth.isLoggedIn)\r\n    const logout = () => dispatch(logOutTC())\r\n\r\n    return (\r\n        <nav className={style.navbar}>\r\n            {isLoggedIn\r\n                ? <button onClick={logout}>Logout</button>\r\n                : <NavbarItem to='/login' title='Login'/>\r\n            }\r\n            {!isLoggedIn && <NavbarItem to='/registration2' title='Registration'/>}\r\n            <NavbarItem to='/profile' title='Profile'/>\r\n            <NavbarItem to='/set-new-password' title='Password'/>\r\n            <NavbarItem to='/recover' title='Recover Pass'/>\r\n            <NavbarItem to='/packs' title='Packs'/>\r\n            <NavbarItem to='/cards' title='Cards'/>\r\n            <NavbarItem to='/demo' title='Demo'/>\r\n        </nav>\r\n    )\r\n}","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором хранится название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<\r\n  ButtonHTMLAttributes<HTMLButtonElement>,\r\n  HTMLButtonElement\r\n>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n  red?: boolean;\r\n};\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = ({\r\n  red,\r\n  className,\r\n  ...restProps // все остальные пропсы попадут в объект restProps, там же будет children\r\n}) => {\r\n  const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n  //console.log(restProps);\r\n  return (\r\n    <button\r\n      className={finalClassName}\r\n      {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n    />\r\n  );\r\n};\r\n\r\nexport default SuperButton;\r\n","import React, {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  InputHTMLAttributes,\r\n  KeyboardEvent\r\n} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<\r\n  InputHTMLAttributes<HTMLInputElement>,\r\n  HTMLInputElement\r\n>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n  // и + ещё пропсы которых нет в стандартном инпуте\r\n  onChangeText?: (value: string) => void;\r\n  onEnter?: () => void;\r\n  error?: string;\r\n  spanClassName?: string;\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = ({\r\n  onChange,\r\n  onChangeText,\r\n  onKeyPress,\r\n  onEnter,\r\n  error,\r\n  className,\r\n  spanClassName,\r\n  title,\r\n  ...restProps // все остальные пропсы попадут в объект restProps\r\n}) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange && onChange(e); // если есть пропс onChange // то передать ему е (поскольку onChange не обязателен)\r\n\r\n    onChangeText && onChangeText(e.currentTarget.value);\r\n  };\r\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    onKeyPress && onKeyPress(e);\r\n\r\n    e.key === \"Enter\" && // если нажата кнопка Enter\r\n    onEnter && // и есть пропс onEnter\r\n      onEnter(); // то вызвать его\r\n  };\r\n  // console.log(className);\r\n  const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n  const finalInputClassName = `${\r\n    error ? s.errorInput : s.superInput\r\n  } ${className}`; // need to fix with (?:) and s.superInput\r\n\r\n  return (\r\n    <div className={s.inputItem}>\r\n      {title && <div className={s.title}>{title}</div>}\r\n      <input\r\n        onChange={onChangeCallback}\r\n        onKeyPress={onKeyPressCallback}\r\n        className={finalInputClassName}\r\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n      />\r\n      <div className={s.inputErrorMessageArea}>\r\n      {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuperInputText;\r\n","import React, {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  InputHTMLAttributes\r\n} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<\r\n  InputHTMLAttributes<HTMLInputElement>,\r\n  HTMLInputElement\r\n>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n  onChangeChecked?: (checked: boolean) => void;\r\n  spanClassName?: string;\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = ({\r\n  type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n  onChange,\r\n  onChangeChecked,\r\n  className,\r\n  spanClassName,\r\n  children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n  ...restProps // все остальные пропсы попадут в объект restProps\r\n}) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    // сделайте так чтоб работал onChange и onChangeChecked\r\n    onChange && onChange(e);\r\n    onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n  };\r\n\r\n  const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n  return (\r\n    <label>\r\n      <input\r\n        type={\"checkbox\"}\r\n        onChange={onChangeCallback}\r\n        className={finalInputClassName}\r\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n      />\r\n      {children && <span className={s.spanClassName}>{children}</span>}\r\n    </label> // благодаря label нажатие на спан передастся в инпут\r\n  );\r\n};\r\n\r\nexport default SuperCheckbox;\r\n","import React from 'react';\r\nimport s from './SearchComponent.module.css';\r\n\r\ntype searchFieldType = {\r\n    value: string\r\n    onChangeHandler(value: string): void\r\n    onSubmitHandler(value: string): void\r\n}\r\n\r\n\r\nfunction SearchComponent({value, onChangeHandler, onSubmitHandler}: searchFieldType) {\r\n    const handleKeyPress = (e: any) => {\r\n        if (e.key === 'Enter') {\r\n            //alert(e.target.value)\r\n            onSubmitHandler(e.target.value)\r\n        }\r\n    }\r\n\r\n\r\n    const handleOnBlur = (e: any) => {\r\n        onSubmitHandler(e.target.value)\r\n    }\r\n\r\n    const clearSearch = () => {\r\n        onChangeHandler('')\r\n        onSubmitHandler('')\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.searchComponent}>\r\n            <input\r\n                type='text' className={s.input} value={value}\r\n                onChange={(e) => onChangeHandler(e.currentTarget.value)}\r\n                onKeyPress={handleKeyPress}\r\n                onBlur={handleOnBlur}\r\n                placeholder={'Find on page'}\r\n            />\r\n            <button onClick={clearSearch}>x</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchComponent;\r\n","const SET_SEARCH_VALUE = 'SET_SEARCH_VALUE';\r\n\r\nexport type InitialStateType = {\r\n    searchValue: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    searchValue: '',\r\n}\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setSearchAC>\r\n\r\nexport const searchReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_SEARCH_VALUE:\r\n            return {\r\n                ...state,\r\n                searchValue: action.payload.value\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setSearchAC = (value: string) => ({\r\n        type: SET_SEARCH_VALUE,\r\n        payload: {value}\r\n    }\r\n)","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport SearchComponent from \"./SearchComponent\";\r\n// import inputValidator from \"../inputValidator\";\r\nimport {setSearchAC} from \"../../redux/search-reducer\";\r\n\r\ntype SearchStateType = {\r\n    value: string\r\n}\r\n\r\nfunction SearchContainer() {\r\n    const dispatch = useDispatch()\r\n    const [searchState, setSearchState] = useState<SearchStateType>(\r\n        {\r\n            value: \"\"\r\n        }\r\n    )\r\n\r\n    const onChangeHandler = (searchValue:string) => {\r\n        setSearchState({\r\n            value: searchValue\r\n        })\r\n    }\r\n\r\n    const onSubmitHandler = (searchValue:string) => {\r\n        dispatch(setSearchAC(searchValue))\r\n    }\r\n\r\n    useEffect(() => {\r\n        onSubmitHandler(searchState.value)\r\n    }, [searchState.value])\r\n\r\n    return (\r\n        <div>\r\n            <SearchComponent\r\n                value={searchState.value}\r\n                onChangeHandler={onChangeHandler}\r\n                onSubmitHandler={onSubmitHandler}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchContainer;","import React from 'react';\r\nimport s from '../styles/PaginationDisplay.module.css';\r\n\r\ntype PaginationType = {\r\n    currentPage: number\r\n    totalItems: number\r\n    itemsOnPage: number\r\n    getPage(currentPage: number): void\r\n    getItemsOnPage(itemsOnPage: number): void\r\n}\r\n\r\nfunction PaginationDisplay({currentPage, totalItems, itemsOnPage, getPage, getItemsOnPage}: PaginationType) {\r\n\r\n    let pages: JSX.Element[] = []\r\n\r\n    const lastPage = Math.ceil(totalItems / itemsOnPage)\r\n\r\n    for (let i = 1; i <= lastPage; i++) pages.push((\r\n        <button\r\n            key={i}\r\n            style={{background: currentPage === i ? 'lightblue' : undefined}}\r\n            onClick={() => getPage(i)}\r\n        >\r\n            {i}\r\n        </button>\r\n    ));\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <select value={itemsOnPage}\r\n                    onChange={e => {\r\n                        getItemsOnPage(Number(e.currentTarget.value))\r\n                    }}\r\n                    style={{}}>\r\n                <option value={5}>5</option>\r\n                <option value={10}>10</option>\r\n                <option value={20}>20</option>\r\n                <option value={50}>50</option>\r\n            </select>\r\n            {pages}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PaginationDisplay;\r\n","const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_ITEMS_ON_PAGE = 'SET_ITEMS_ON_PAGE';\r\n\r\nexport type InitialStateType = {\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    page: 1,\r\n    pageCount: 10,\r\n}\r\n\r\n\r\n\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setCurrentPageAC>\r\n\r\nexport const paginationReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.payload.value\r\n            }\r\n        case SET_ITEMS_ON_PAGE:\r\n            return {\r\n                ...state,\r\n                pageCount: action.payload.value\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCurrentPageAC = (value: number) => ({\r\n        type: SET_CURRENT_PAGE,\r\n        payload: {value}\r\n    }\r\n)\r\n\r\nexport const setItemsOnPageAC = (value: number) => ({\r\n        type: SET_ITEMS_ON_PAGE,\r\n        payload: {value}\r\n    }\r\n)","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport PaginationDisplay from \"./PaginationDisplay\";\r\nimport {setCurrentPageAC, setItemsOnPageAC} from \"../../redux/pagination-reducer\";\r\nimport {RootStateType} from \"../../redux/store\";\r\n\r\ntype PaginationStateType = {\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport type PaginationContainerPropsType = {\r\n    totalItems: number\r\n}\r\n\r\nfunction PaginationContainer({totalItems}: PaginationContainerPropsType) {\r\n    const dispatch = useDispatch()\r\n    const paginationState = useSelector((state: RootStateType): PaginationStateType => state.pagination)\r\n\r\n\r\n    const getPage = (currentPage: number) => {\r\n        dispatch(setCurrentPageAC(currentPage))\r\n    }\r\n\r\n    const getItemsOnPage = (itemsOnPage: number) => {\r\n        dispatch(setItemsOnPageAC(itemsOnPage))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <PaginationDisplay\r\n                currentPage={paginationState.page}\r\n                itemsOnPage={paginationState.pageCount}\r\n                totalItems={totalItems}\r\n                getPage={getPage}\r\n                getItemsOnPage={getItemsOnPage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PaginationContainer;\r\n","import React from 'react';\r\nimport s from './SortDisplay.module.css';\r\n\r\ntype PaginationType = {\r\n    currentPage: number\r\n    totalItems: number\r\n    itemsOnPage: number\r\n    getPage(currentPage: number): void\r\n    getItemsOnPage(itemsOnPage: number): void\r\n}\r\n\r\nfunction SortDisplay({currentPage, totalItems, itemsOnPage, getPage, getItemsOnPage}: PaginationType) {\r\n\r\n    let pages: JSX.Element[] = []\r\n\r\n    const lastPage = Math.ceil(totalItems / itemsOnPage)\r\n\r\n    for (let i = 1; i <= lastPage; i++) pages.push((\r\n        <button\r\n            key={i}\r\n            style={{background: currentPage === i ? 'lightblue' : undefined}}\r\n            onClick={() => getPage(i)}\r\n        >\r\n            {i}\r\n        </button>\r\n    ));\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <select value={itemsOnPage}\r\n                    onChange={e => {\r\n                        getItemsOnPage(Number(e.currentTarget.value))\r\n                    }}\r\n                    style={{}}>\r\n                <option value={5}>5</option>\r\n                <option value={10}>10</option>\r\n                <option value={20}>20</option>\r\n                <option value={50}>50</option>\r\n            </select>\r\n            {pages}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SortDisplay;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport SortDisplay from \"./SortDisplay\";\r\nimport {setCurrentPageAC, setItemsOnPageAC} from \"../../redux/pagination-reducer\";\r\nimport {RootStateType} from \"../../redux/store\";\r\n\r\ntype PaginationStateType = {\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nfunction SortContainer() {\r\n    const dispatch = useDispatch()\r\n    const paginationState = useSelector((state: RootStateType): PaginationStateType => state.pagination)\r\n\r\n\r\n    const getPage = (currentPage: number) => {\r\n        dispatch(setCurrentPageAC(currentPage))\r\n    }\r\n\r\n    const getItemsOnPage = (itemsOnPage: number) => {\r\n        dispatch(setItemsOnPageAC(itemsOnPage))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <SortDisplay\r\n                currentPage={paginationState.page}\r\n                itemsOnPage={paginationState.pageCount}\r\n                totalItems={54}\r\n                getPage={getPage}\r\n                getItemsOnPage={getItemsOnPage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SortContainer;\r\n","import React, {useState} from 'react';\r\nimport SuperButton from '../common/SuperButton/SuperButton';\r\nimport SuperInputText from '../common/SuperInputText/SuperInputText';\r\nimport SuperCheckbox from '../common/SuperCheckbox/SuperCheckbox';\r\nimport s from './styles/Registration.module.css'\r\nimport SearchComponent from \"../common/SearchComponent/SearchComponent\";\r\nimport SearchContainer from \"../common/SearchComponent/SearchContainer\";\r\nimport PaginationContainer from \"../common/Pagination/PaginationContainer\";\r\nimport SortContainer from \"../common/Sort/SortContainer\";\r\n\r\ntype RegistrationPropsType = {\r\n    error?: string\r\n}\r\n\r\nfunction SuperInputsDemo() {\r\n    const [text, setText] = useState<string>(\"\");\r\n    const error = text ? \"\" : \"Field can't be empty\";\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert(\"Введите текст\");\r\n        } else {\r\n            alert(text); // если нет ошибки показать текст\r\n\r\n        }\r\n    };\r\n\r\n    const [checked, setChecked] = useState<boolean>(false);\r\n    // const testOnChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    //     setChecked(e.currentTarget.checked);\r\n\r\n\r\n    return (\r\n        <div className={s.demoContainer}>\r\n            <h1>\r\n                SuperInputs Demo\r\n            </h1>\r\n            <div>\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                    className={s.green} // проверьте, рабоет ли смешивание классов\r\n                />\r\n\r\n                <SuperButton\r\n                    red={text === ''} // пропсу с булевым значением не обязательно указывать true\r\n                    onClick={showAlert}\r\n                >\r\n                    Button {/*// название кнопки попадёт в children*/}\r\n                </SuperButton>\r\n\r\n                <SuperCheckbox checked={checked} onChangeChecked={setChecked}>\r\n                    CheckboxText {/*// этот текст попадёт в children*/}\r\n                </SuperCheckbox>\r\n                <div>SearchComponent:\r\n                    <div style={{'border': 'solid 1px black'}}><SearchContainer/></div>\r\n                </div>\r\n                <div>Pagination:\r\n                    <div style={{'border': 'solid 1px black'}}><PaginationContainer totalItems={50}/></div>\r\n                </div>\r\n                <div>Sort:\r\n                    <div style={{'border': 'solid 1px black'}}><SortContainer/></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SuperInputsDemo;\r\n","\r\nexport type ValidatorFieldType = 'email' | 'password'\r\n\r\nconst inputValidator = (value: string, type: ValidatorFieldType): string => {\r\n    switch (type) {\r\n        case 'email':\r\n            return (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) ? '' : 'Invalid email'\r\n        case 'password':\r\n            return /^[a-zA-Z0-9!@#$%^&*]{6,16}$/i.test(value) ? '' : 'Invalid password'\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nexport default inputValidator","import React, {FormEvent} from 'react';\r\nimport style from '../styles/Login.module.css'\r\nimport SuperInputText from '../../common/SuperInputText/SuperInputText';\r\nimport SuperCheckbox from '../../common/SuperCheckbox/SuperCheckbox';\r\nimport SuperButton from '../../common/SuperButton/SuperButton';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {LoginFormStateType} from './LoginContainer';\r\nimport {ValidatorFieldType} from '../../common/inputValidator';\r\nimport {DEFAULT_EMAIL, DEFAULT_PASSWORD, DEV_MODE} from \"../../App\";\r\n\r\ntype LoginPropsType = {\r\n    formState: LoginFormStateType\r\n    onChangeHandler(field: ValidatorFieldType): (value: string) => void\r\n    onBlurHandler(field: ValidatorFieldType): (e: React.FocusEvent<HTMLInputElement>) => void\r\n    checkBoxHandler(rememberMe: boolean): void\r\n    onSubmitHandler(email: string, password: string, rememberMe: boolean): void\r\n}\r\n\r\nfunction Login({formState, onChangeHandler, onBlurHandler, checkBoxHandler, onSubmitHandler}: LoginPropsType) {\r\n    console.log('Login called')\r\n    const email = formState.email\r\n    const password = formState.password\r\n    const rememberMe = formState.rememberMe\r\n\r\n    const submitForm = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        onSubmitHandler(email.value, password.value, rememberMe)\r\n    }\r\n\r\n    const disableSubmit = !!(email.error || password.error || formState.globalFormError)\r\n\r\n    return (\r\n        <>\r\n            <form className={style.form} onSubmit={submitForm}>\r\n                <h1>Sign in</h1>\r\n                <SuperInputText\r\n                    value={email.value}\r\n                    error={email.error}\r\n                    onChangeText={onChangeHandler('email')}\r\n                    onBlur={onBlurHandler('email')}\r\n                    placeholder={'Email'}\r\n                    type={'text'}\r\n                />\r\n                <SuperInputText\r\n                    value={password.value}\r\n                    error={password.error}\r\n                    onChangeText={onChangeHandler('password')}\r\n                    onBlur={onBlurHandler('password')}\r\n                    placeholder={'Password'}\r\n                    type={'password'}\r\n                />\r\n                <NavLink to={'/recover'}><span>Forgot password?</span></NavLink>\r\n                <div className={style.rememberMe}>\r\n                    <SuperCheckbox onChangeChecked={checkBoxHandler} checked={rememberMe}/>\r\n                    <span>Remember me</span>\r\n                </div>\r\n                <SuperButton disabled={disableSubmit} type={'submit'}>Sign in</SuperButton>\r\n            </form>\r\n            {DEV_MODE ?\r\n                <div className={style.messageDefault}>\r\n                    <div>To sign in you can use test account credentials:</div>\r\n                    <div className={style.credentialsContainer}>\r\n                        <div className={style.credentialsString}>\r\n                            <div className={style.credentialsTitle}>email:</div>\r\n                            <div className={style.credentialsValue}>{`${DEFAULT_EMAIL}`}</div>\r\n                        </div>\r\n                        <div className={style.credentialsString}>\r\n                            <div className={style.credentialsTitle}>password:</div>\r\n                            <div className={style.credentialsValue}>{`${DEFAULT_PASSWORD}`}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                : ''\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React, {useState} from 'react';\r\nimport inputValidator from '../../common/inputValidator';\r\nimport Login from './Login';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\nimport {logInTC} from '../../redux/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {DEFAULT_EMAIL, DEFAULT_PASSWORD, DEV_MODE} from \"../../App\";\r\n\r\nexport type LoginFormStateType = {\r\n    email: InputStateType\r\n    password: InputStateType\r\n    rememberMe: boolean\r\n    globalFormError: string\r\n}\r\n\r\nexport type InputStateType = {\r\n    value: string\r\n    error: string\r\n    touched: boolean\r\n}\r\n\r\nfunction LoginContainer() {\r\n    console.log('LoginContainer called')\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType): boolean => state.auth.isLoggedIn)\r\n\r\n    let [formState, setFormState] = useState<LoginFormStateType>(\r\n        {\r\n            email: {value: DEV_MODE ? DEFAULT_EMAIL : '', error: '', touched: false},\r\n            password: {value: DEV_MODE ? DEFAULT_PASSWORD : '', error: '', touched: false},\r\n            rememberMe: false,\r\n            globalFormError: ''\r\n        })\r\n\r\n    const onChangeHandler = (field: 'email' | 'password') => (value: string) => {\r\n        setFormState({\r\n            ...formState, [field]:\r\n                {\r\n                    ...formState[field],\r\n                    value: value.trim(),\r\n                    error: formState[field].touched ? inputValidator(value, field) : ''\r\n                }\r\n        })\r\n    }\r\n\r\n    const onBlurHandler = (field: 'email' | 'password') => (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setFormState({\r\n            ...formState, [field]:\r\n                {\r\n                    ...formState[field],\r\n                    error: formState[field].value ? inputValidator(e.target.value, field) : 'Required field',\r\n                    touched: true\r\n                }\r\n        })\r\n    }\r\n\r\n    const checkBoxHandler = (rememberMe: boolean) => {\r\n        setFormState({...formState, rememberMe}\r\n        )\r\n    }\r\n\r\n    const onSubmitHandler = (email: string, password: string, rememberMe: boolean) => {\r\n        dispatch(logInTC(email, password, rememberMe))\r\n    }\r\n\r\n    return (\r\n        isLoggedIn\r\n            ? <Redirect to={'profile'}/>\r\n            : <div>\r\n                <Login\r\n                    formState={formState}\r\n                    onChangeHandler={onChangeHandler}\r\n                    onBlurHandler={onBlurHandler}\r\n                    checkBoxHandler={checkBoxHandler}\r\n                    onSubmitHandler={onSubmitHandler}\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default LoginContainer;\r\n","import React, {useEffect, useState} from 'react';\r\nimport style from '../styles/Recover.module.css'\r\n\r\ntype RecoverTimerPropsType = {\r\n    getTime(): number\r\n    hideTimer(show: boolean): void\r\n}\r\n\r\nfunction RecoverTimer({getTime, hideTimer}: RecoverTimerPropsType) {\r\n    console.log('RecoverTimer called')\r\n\r\n    const [timeMs, setTimeMs] = useState(getTime())\r\n\r\n    const tick = () => {\r\n        setTimeMs(getTime())\r\n        if (getTime() < 0) hideTimer(false)\r\n    }\r\n\r\n    const convertMsToTime = (ms: number) => {\r\n        const minutes = Math.floor(ms / 60000);\r\n        const seconds = ((ms % 60000) / 1000);\r\n        return minutes + ':' + (seconds < 10 ? '0' : '') + Math.floor(seconds)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const timerID = setInterval(() => tick(), 1000);\r\n        return () => clearInterval(timerID);\r\n    }, [])\r\n\r\n    return (\r\n        <span className={style.timer}>\r\n                {`Time till next link: ${convertMsToTime(timeMs)}`}\r\n            </span>\r\n    )\r\n}\r\n\r\nexport default RecoverTimer;","import {DispatchType} from './auth-reducer';\r\nimport {API} from '../api/API';\r\n\r\ntype PageStateType = {\r\n    timerIsOn: boolean\r\n}\r\n\r\nconst initialState: PageStateType = {\r\n    timerIsOn: false,\r\n}\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof toggleTimerAC>\r\n\r\nexport const recoverReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case TOGGLE_TIMER_STATUS:\r\n            return {...state, timerIsOn: action.timerIsOn}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst TOGGLE_TIMER_STATUS = 'TOGGLE-TIMER-STATUS'\r\n\r\nexport const toggleTimerAC = (timerIsOn: boolean) => ({\r\n        type: TOGGLE_TIMER_STATUS,\r\n        timerIsOn\r\n    } as const\r\n)\r\n\r\n// Thunks\r\n\r\nexport const recoverPasswordTC = (email: string, baseUrl: string) => (dispatch: DispatchType) => {\r\n    const from = 'Administrator'\r\n    const message =\r\n        `<div style=\"background-color: lime; padding: 15px\"> password recovery link:\r\n         <a href='${baseUrl}/$token$'>link</a></div>`\r\n    API.forgot(email, from, message)\r\n        .then(response => {\r\n            // localStorage.timerData = Date.now()\r\n        })\r\n        .catch(e => {\r\n            console.log('Recover Error', e)\r\n        })\r\n        .finally(() => {\r\n            localStorage.timerData = Date.now()\r\n            dispatch(toggleTimerAC(true))\r\n        })\r\n\r\n}","import React, {FormEvent} from 'react';\r\nimport style from '../styles/Recover.module.css'\r\nimport SuperInputText from '../../common/SuperInputText/SuperInputText';\r\nimport {NavLink} from 'react-router-dom';\r\nimport SuperButton from '../../common/SuperButton/SuperButton';\r\nimport {RecoverFormStateType} from './RecoverContainer';\r\nimport RecoverTimer from './RecoverTimer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\nimport {toggleTimerAC} from '../../redux/recover-reducer';\r\n\r\ntype RecoverPropsType = {\r\n    formState: RecoverFormStateType\r\n    onChangeHandler(value: string): void\r\n    onBlurHandler(e: React.FocusEvent<HTMLInputElement>): void\r\n    onSubmitHandler(email: string): void\r\n}\r\n\r\nconst Recover = ({formState, onChangeHandler, onBlurHandler, onSubmitHandler}: RecoverPropsType) => {\r\n    console.log('Recover called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const timerValueMs = 11000\r\n    const getTime = () => (Number(localStorage.timerData) + timerValueMs - Date.now())\r\n    dispatch(toggleTimerAC(getTime() > 0))\r\n    const timerIsOn = useSelector((state: RootStateType) => state.pageRecover.timerIsOn)\r\n\r\n    const hideTimer = () => {\r\n        dispatch(toggleTimerAC(false))\r\n    }\r\n\r\n    const submitForm = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        onSubmitHandler(formState.value)\r\n    }\r\n\r\n    return (\r\n        <form className={style.form} onSubmit={submitForm}>\r\n            <h1>Recover</h1>\r\n            <SuperInputText\r\n                value={formState.value}\r\n                error={formState.error}\r\n                onChangeText={onChangeHandler}\r\n                onBlur={onBlurHandler}\r\n                placeholder={'Email'}\r\n            />\r\n            <div className={style.timerContainer}>\r\n                {timerIsOn\r\n                    ? <RecoverTimer getTime={getTime} hideTimer={hideTimer}/>\r\n                    : <SuperButton disabled={!!formState.error} type={'submit'}>Send</SuperButton>\r\n                }\r\n            </div>\r\n            <NavLink to={'/login'}><span>Login page</span></NavLink>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Recover;\r\n","import React, {useState} from 'react';\r\nimport inputValidator from '../../common/inputValidator';\r\nimport Recover from './Recover';\r\nimport {useDispatch} from 'react-redux';\r\nimport {recoverPasswordTC} from '../../redux/recover-reducer';\r\n\r\nexport type RecoverFormStateType = {\r\n    value: string\r\n    error: string\r\n    touched: boolean\r\n}\r\n\r\n!localStorage.timerData && localStorage.setItem('timerData', '0')\r\n\r\nfunction RecoverContainer() {\r\n    console.log('RecoverContainer called')\r\n\r\n    const dispatch = useDispatch()\r\n    let [formState, setFormState] =\r\n        useState<RecoverFormStateType>({value: '', error: '', touched: false})\r\n    const baseUrl = `${window.location.origin}/#/set-new-password`\r\n\r\n    const onChangeHandler = (value: string) => {\r\n        setFormState({\r\n            ...formState,\r\n            value: value.trim(),\r\n            error: formState.touched ? inputValidator(value, 'email') : ''\r\n        })\r\n    }\r\n\r\n    const onBlurHandler = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setFormState({\r\n            ...formState,\r\n            error: formState.value ? inputValidator(e.target.value, 'email') : 'Required field',\r\n            touched: true\r\n        })\r\n    }\r\n\r\n    const onSubmitHandler = (email: string) => {\r\n        setFormState({\r\n            ...formState,\r\n            error: formState.value ? inputValidator(email, 'email') : 'Required field',\r\n            touched: true\r\n        })\r\n        if (!inputValidator(formState.value, 'email')) {\r\n            dispatch(recoverPasswordTC(email, baseUrl))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Recover\r\n            formState={formState}\r\n            onChangeHandler={onChangeHandler}\r\n            onBlurHandler={onBlurHandler}\r\n            onSubmitHandler={onSubmitHandler}\r\n        />\r\n    )\r\n}\r\n\r\nexport default RecoverContainer;\r\n","import React, {FormEvent} from 'react';\r\nimport style from '../styles/Login.module.css'\r\nimport SuperButton from '../../common/SuperButton/SuperButton';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {NewPasswordFormStateType} from './NewPasswordContainer';\r\nimport SuperInputText from '../../common/SuperInputText/SuperInputText';\r\n\r\ntype RecoverPropsType = {\r\n    formState: NewPasswordFormStateType\r\n    onChangeHandler(field: 'password' | 'confirm'): (value: string) => void\r\n    onBlurHandler(field: 'password' | 'confirm'): (e: React.FocusEvent<HTMLInputElement>) => void\r\n    onSubmitHandler(password: string): void\r\n}\r\n\r\nconst NewPassword = ({formState, onChangeHandler, onBlurHandler, onSubmitHandler,}: RecoverPropsType) => {\r\n\r\n    console.log('NewPassword called')\r\n\r\n    const submitForm = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        onSubmitHandler(formState.password.value)\r\n    }\r\n\r\n    const formError = !!(formState.password.error || formState.confirm.error)\r\n\r\n    return (\r\n        <form className={style.form} onSubmit={submitForm}>\r\n            <h1>New password</h1>\r\n            <SuperInputText\r\n                value={formState.password.value}\r\n                error={formState.password.error}\r\n                onChangeText={onChangeHandler('password')}\r\n                onBlur={onBlurHandler('password')}\r\n                placeholder={'Enter new password'}\r\n                type={'password'}\r\n            />\r\n            <SuperInputText\r\n                value={formState.confirm.value}\r\n                error={formState.confirm.error}\r\n                onChangeText={onChangeHandler('confirm')}\r\n                onBlur={onBlurHandler('confirm')}\r\n                placeholder={'Confirm'}\r\n                type={'password'}\r\n            />\r\n            <SuperButton disabled={formError} type={'submit'}>Send</SuperButton>\r\n            <NavLink to={'/login'}><span>Login page</span></NavLink>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewPassword","import React, {useEffect, useState} from 'react';\r\nimport inputValidator from '../../common/inputValidator';\r\nimport NewPassword from './NewPassword';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setNewPasswordTC} from '../../redux/auth-reducer';\r\nimport {useParams, useLocation} from 'react-router-dom';\r\n\r\nexport type NewPasswordFormStateType = {\r\n    password: InputType\r\n    confirm: InputType\r\n}\r\n\r\ntype InputType = {\r\n    value: string\r\n    error: string\r\n    touched: boolean\r\n}\r\n\r\ntype ParamsType = {\r\n    token: string | undefined\r\n}\r\n\r\nfunction NewPasswordContainer() {\r\n    console.log('NewPasswordContainer called')\r\n\r\n    const dispatch = useDispatch()\r\n    const params: ParamsType = useParams()\r\n    const token = params.token ? params.token : ''\r\n    window.history.replaceState(null, '', '/#/set-new-password')\r\n\r\n    let [formState, setFormState] = useState<NewPasswordFormStateType>(\r\n        {\r\n            password: {value: '', error: '', touched: false},\r\n            confirm: {value: '', error: '', touched: false}\r\n        })\r\n\r\n    const onChangeHandler = (field: 'password' | 'confirm') => (value: string) => {\r\n        setFormState({\r\n            ...formState, [field]:\r\n                {\r\n                    ...formState[field],\r\n                    value: value.trim(),\r\n                    error: formState[field].touched ? inputValidator(value, 'password') : ''\r\n                }\r\n        })\r\n    }\r\n\r\n    const onBlurHandler = (field: 'password' | 'confirm') => (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setFormState({\r\n            ...formState, [field]:\r\n                {\r\n                    ...formState[field],\r\n                    error: formState[field].value ?\r\n                        inputValidator(e.target.value, 'password') : 'Required field',\r\n                    touched: true\r\n                }\r\n        })\r\n    }\r\n\r\n    const onSubmitHandler = (password: string) => {\r\n        const error = !formState.password.value\r\n            ? 'Please enter new password'\r\n            : formState.password.value !== formState.confirm.value\r\n            ? 'Passwords do not match'\r\n            : ''\r\n        if (error) {\r\n            setFormState({\r\n                ...formState,\r\n                password: {...formState.password, error: ' ', touched: true},\r\n                confirm: {...formState.confirm, error, touched: true}\r\n            })\r\n        } else {\r\n            dispatch(setNewPasswordTC(password, token))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <NewPassword\r\n            formState={formState}\r\n            onChangeHandler={onChangeHandler}\r\n            onBlurHandler={onBlurHandler}\r\n            onSubmitHandler={onSubmitHandler}\r\n        />\r\n    )\r\n}\r\n\r\nexport default NewPasswordContainer;\r\n","export default __webpack_public_path__ + \"static/media/loader.b257f2d9.svg\";","import React, {useEffect, useState} from 'react'\r\nimport style from './loader.module.css'\r\nimport loader from './loader.svg'\r\n\r\nexport function Loader() {\r\n\r\n    // const [isMounted, setIsMounted] = useState(true);\r\n    // const shouldRender = useDelayUnmount(isMounted, 500);\r\n    // const mountedStyle = {opacity: 1, transition: 'opacity 500ms ease-in'};\r\n    // const unmountedStyle = {opacity: 0, transition: 'opacity 500ms ease-in'};\r\n    //\r\n    // function useDelayUnmount(isMounted: boolean, delayTime: number) {\r\n    //     const [shouldRender, setShouldRender] = useState(false);\r\n    //\r\n    //     useEffect(() => {\r\n    //         let timeoutId: any;\r\n    //         if (isMounted && !shouldRender) {\r\n    //             setShouldRender(true);\r\n    //         } else if (!isMounted && shouldRender) {\r\n    //             timeoutId = setTimeout(\r\n    //                 () => setShouldRender(false),\r\n    //                 delayTime\r\n    //             );\r\n    //         }\r\n    //         return () => clearTimeout(timeoutId);\r\n    //     }, [isMounted, delayTime, shouldRender]);\r\n    //     return shouldRender;\r\n    // }\r\n    //\r\n    // const fadeStyle = isMounted ? mountedStyle : unmountedStyle\r\n    //\r\n    // useEffect(() => {\r\n    //     setTimeout(() => setIsMounted(false), 100)\r\n\r\n    // return (\r\n    //         <div className={`${style.dimScreen} ${fadeStyle}`}>\r\n    //             <img className={style.loader}\r\n    //                  src={loader}\r\n    //                  alt=\"Loading...\"/>\r\n    //         </div>\r\n    // )\r\n\r\n    return (\r\n        <div className={`${style.dimScreen}`}>\r\n            <img className={style.loader}\r\n                 src={loader}\r\n                 alt=\"Loading...\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FormEvent} from 'react';\r\nimport SuperButton from '../../common/SuperButton/SuperButton';\r\nimport SuperInputText from '../../common/SuperInputText/SuperInputText';\r\nimport style from '../styles/Registration.module.css'\r\nimport {RegistrationFormStateType} from \"./RegistrationContainer\";\r\nimport {RegistrationValidatorFieldType} from '../../common/registrationInputValidator';\r\n\r\n// type RegistrationPropsType = {\r\n//     error?: string\r\n// }\r\ntype RegistrationPropsType = {\r\n    registrationFormState: RegistrationFormStateType\r\n    onChangeHandler(field: RegistrationValidatorFieldType): (value: string) => void\r\n    onBlurHandler(field: RegistrationValidatorFieldType): (e: React.FocusEvent<HTMLInputElement>) => void\r\n    onSubmitHandler(email: string, password: string): void\r\n}\r\n\r\n// type StateType = {\r\n//     email: string\r\n//     password1: string\r\n//     password2: string\r\n//     errorResponse: string\r\n//     successfullyRegistered: boolean\r\n// }\r\n// const initialState: StateType = {\r\n//     email: \"\",\r\n//     password1: \"\",\r\n//     password2: \"\",\r\n//     errorResponse: \"\",\r\n//     successfullyRegistered: false\r\n// }\r\n\r\n// const RegistrationFormInitialState: RegistrationFormStateType = {}\r\n\r\n\r\nfunction Registration2({registrationFormState, onChangeHandler, onBlurHandler, onSubmitHandler}: RegistrationPropsType) {\r\n    // const [state, setState] = useState<StateType>(initialState);\r\n    // const emailError = state.email ? \"\" : \"Field can't be empty\";\r\n    //\r\n    // const pw1Error = state.password1 ? \"\" : \"Field can't be empty\";\r\n    //\r\n    // const pw2Error = state.password2 ? \"\" : \"Field can't be empty\";\r\n\r\n    const email = registrationFormState.email\r\n    const password = registrationFormState.password\r\n    const password2 = registrationFormState.password2\r\n    const errorResponse = registrationFormState.errorResponse\r\n\r\n    const submitForm = (e: FormEvent<HTMLFormElement>) => {\r\n        e.stopPropagation()\r\n        onSubmitHandler(email.value, password.value)\r\n    }\r\n\r\n    const disableSubmit = !!(email.error || password.error || password2.error || registrationFormState.globalFormError)\r\n    // const handleSignUp = () => {\r\n    //     if (false) {\r\n    //         alert(\"Введите текст\");\r\n    //     } else {\r\n    //         API.registerUser(state.email, state.password1)\r\n    //             .then((res: any) => {\r\n    //                 console.log(`User ${res.data.addedUser.email} successfully signed up`)\r\n    //                 //setState({...state, errorResponse: error.response.data.error})\r\n    //                 //return <Redirect to={'/friday_project#/login/'}/>\r\n    //                 setSuccessfulRegistration(true)\r\n    //\r\n    //             })\r\n    //             .catch((error) => {\r\n    //                 setState({...state, errorResponse: error.response.data.error})\r\n    //             })\r\n    //     }\r\n    // };\r\n\r\n    // const handleEmail = (val: string) => {\r\n    //     //alert(val)\r\n    //     setState({...state, email: val, errorResponse: \"\"})\r\n    // }\r\n    // const handlePw1 = (val: string) => {\r\n    //     //alert(val)\r\n    //     setState({...state, password1: val, errorResponse: \"\"})\r\n    // }\r\n    // const handlePw2 = (val: string) => {\r\n    //     // alert(val)\r\n    //     setState({...state, password2: val, errorResponse: \"\"})\r\n    // }\r\n\r\n    // const setSuccessfulRegistration = (val: boolean) => {\r\n    //     setState({...state, successfullyRegistered: val})\r\n    // }\r\n\r\n    return (\r\n        <form className={style.form} onSubmit={submitForm}>\r\n            <h1>Sign Up</h1>\r\n            <div className={style.registrationErrorMessage}>\r\n                {errorResponse}\r\n            </div>\r\n            <div>\r\n                <SuperInputText\r\n                    title={'Email'}\r\n                    value={email.value}\r\n                    error={email.error}\r\n                    onChangeText={onChangeHandler('email')}\r\n                    onBlur={onBlurHandler('email')}\r\n                    // placeholder={'Email'}\r\n                    type={'text'}\r\n                />\r\n\r\n                <SuperInputText\r\n                    title={'Password'}\r\n                    value={password.value}\r\n                    error={password.error}\r\n                    onChangeText={onChangeHandler('password')}\r\n                    onBlur={onBlurHandler('password')}\r\n                    // placeholder={'Password'}\r\n                    type={'password'}\r\n                />\r\n\r\n                <SuperInputText\r\n                    title={'Confirm password'}\r\n                    value={password2.value}\r\n                    error={password2.error}\r\n                    onChangeText={onChangeHandler('password2')}\r\n                    onBlur={onBlurHandler('password2')}\r\n                    // placeholder={'Password'}\r\n                    type={'password'}\r\n                />\r\n                {/*<SuperInputText*/}\r\n                {/*    title={'Password'}*/}\r\n                {/*    value={password.value}*/}\r\n                {/*    onChangeText={handlePw1}*/}\r\n                {/*    onEnter={handleSignUp}*/}\r\n                {/*    error={pw1Error}*/}\r\n                {/*    className={style.green}*/}\r\n                {/*/>*/}\r\n                {/*<SuperInputText*/}\r\n                {/*    title={'Confirm password'}*/}\r\n                {/*    value={password2.value}*/}\r\n                {/*    onChangeText={handlePw2}*/}\r\n                {/*    onEnter={handleSignUp}*/}\r\n                {/*    error={pw2Error}*/}\r\n                {/*    className={style.green}*/}\r\n                {/*/>*/}\r\n\r\n                <SuperButton\r\n                    disabled={disableSubmit}\r\n                    type={'submit'}\r\n                >\r\n                    Sign up {/* название кнопки попадёт в children*/}\r\n                </SuperButton>\r\n            </div>\r\n\r\n        </form>\r\n\r\n\r\n\r\n        // state.successfullyRegistered ?\r\n        //     <Redirect to={'login'}/>\r\n        //     :\r\n        //     <div className={style.form}>\r\n        //\r\n        //         <div>\r\n        //             Registration\r\n        //         </div>\r\n        //         <div className={style.registrationErrorMessage}>\r\n        //             {state.errorResponse}\r\n        //         </div>\r\n        //         <div>\r\n        //             <SuperInputText\r\n        //                 title={'Email'}\r\n        //                 value={state.email}\r\n        //                 onChangeText={handleEmail}\r\n        //                 onEnter={handleSignUp}\r\n        //                 error={emailError}\r\n        //                 className={style.green}\r\n        //             />\r\n        //             <SuperInputText\r\n        //                 title={'Password'}\r\n        //                 value={state.password1}\r\n        //                 onChangeText={handlePw1}\r\n        //                 onEnter={handleSignUp}\r\n        //                 error={pw1Error}\r\n        //                 className={style.green}\r\n        //             />\r\n        //             <SuperInputText\r\n        //                 title={'Confirm password'}\r\n        //                 value={state.password2}\r\n        //                 onChangeText={handlePw2}\r\n        //                 onEnter={handleSignUp}\r\n        //                 error={pw2Error}\r\n        //                 className={style.green}\r\n        //             />\r\n        //\r\n        //             <SuperButton\r\n        //                 red={false} // пропсу с булевым значением не обязательно указывать true\r\n        //                 onClick={handleSignUp}\r\n        //             >\r\n        //                 Sign up {/*// название кнопки попадёт в children*/}\r\n        //             </SuperButton>\r\n        //\r\n        //\r\n        //         </div>\r\n        //     </div>\r\n    )\r\n}\r\n\r\nexport default Registration2;\r\n","\r\nexport type RegistrationValidatorFieldType = 'email' | 'password' | 'password2'\r\n\r\nconst registrationInputValidator = (type: RegistrationValidatorFieldType, value: string, password1?: string ): string => {\r\n    // console.log(`${type} field validation. Value: ${value}`)\r\n    switch (type) {\r\n        case 'email':\r\n            return (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) ? '' : 'Invalid email'\r\n        case 'password':\r\n            return /^[a-zA-Z0-9!@#$%^&*]{6,16}$/i.test(value) ? '' : 'Invalid password'\r\n        case 'password2':\r\n            return value === password1 ? '' : 'Please make sure your passwords match'\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nexport default registrationInputValidator\r\n\r\n//\r\n// const password2Validator = (password1: string, password2: string): string => {\r\n//     if (password1 !== password2){\r\n//         return 'Please make sure your passwords match'\r\n//     } else {\r\n//         return ''\r\n//     }\r\n//\r\n// }\r\n//\r\n// export default password2Validator","import {setAppStatusAC} from \"./app-reducer\";\r\nimport {API} from \"../api/API\";\r\nimport {DispatchType} from \"./auth-reducer\";\r\n\r\nconst SET_SUCCESSFULLY_REGISTERED = 'SET-SUCCESSFULLY-REGISTERED'\r\n\r\ntype PageStateType = {\r\n    isSuccessfullyRegistered: boolean\r\n}\r\n\r\nconst initialState: PageStateType = {\r\n    isSuccessfullyRegistered: false\r\n}\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setSuccessfullyRegisteredAC>\r\n\r\nexport const registrationReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_SUCCESSFULLY_REGISTERED:\r\n\r\n            return {...state, isSuccessfullyRegistered: action.isSuccessfullyRegistered}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setSuccessfullyRegisteredAC = (isSuccessfullyRegistered: boolean) => ({\r\n        type: SET_SUCCESSFULLY_REGISTERED,\r\n        isSuccessfullyRegistered\r\n    } as const\r\n)\r\n\r\nexport const registrationTC = (email: string, password: string) => (dispatch: DispatchType) => {\r\n    // dispatch(setAppStatusAC('loading'))\r\n    // API.registration(email, password)\r\n    //     .then((response) => {\r\n    //          dispatch(setProfileAC(response))\r\n    //         dispatch(setIsLoggedInAC(true))\r\n    //     })\r\n    //     .catch(e => console.log('Error: ', {...e}))\r\n    //     .finally(() => dispatch(setAppStatusAC('idle')))\r\n    dispatch(setAppStatusAC('loading'))\r\n    API.registration(email, password)\r\n        .then((response) => {\r\n             //dispatch(setProfileAC(response))\r\n             dispatch(setSuccessfullyRegisteredAC(true))\r\n        })\r\n        .catch(e => console.log('Error: ', {...e}))\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {API} from '../../api/API';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport Registration2 from './Registration2';\r\nimport registrationInputValidator from \"../../common/registrationInputValidator\";\r\nimport {logInTC} from \"../../redux/auth-reducer\";\r\nimport {registrationTC, setSuccessfullyRegisteredAC} from \"../../redux/registration-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport type RegistrationFormStateType = {\r\n    email: InputStateType\r\n    password: InputStateType\r\n    password2: InputStateType\r\n    errorResponse: string\r\n    successfullyRegistered: boolean\r\n    // rememberMe: boolean\r\n    globalFormError: string\r\n\r\n}\r\n\r\nexport type InputStateType = {\r\n    value: string\r\n    error: string\r\n    touched: boolean\r\n}\r\n\r\n// type StateType = {\r\n//     email: string\r\n//     password1: string\r\n//     password2: string\r\n//     errorResponse: string\r\n//     successfullyRegistered: boolean\r\n// }\r\nconst initialState: RegistrationFormStateType = {\r\n    email: {value: '', error: '', touched: false},\r\n    password: {value: '', error: '', touched: false},\r\n    password2: {value: '', error: '', touched: false},\r\n    errorResponse: \"\",\r\n    successfullyRegistered: false,\r\n    globalFormError: ''\r\n}\r\n\r\n\r\nfunction RegistrationContainer() {\r\n    console.log('Registration Container component called')\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType): boolean => state.auth.isLoggedIn)\r\n    const isSuccessfullyRegistered = useSelector((state: RootStateType): boolean => state.pageRegistration.isSuccessfullyRegistered)\r\n\r\n    const [registrationFormState, setRegistrationFormState] = useState<RegistrationFormStateType>(initialState);\r\n\r\n    useEffect(() => {\r\n        if (isSuccessfullyRegistered) {\r\n            dispatch(setSuccessfullyRegisteredAC(false))\r\n        }\r\n    })\r\n\r\n    // const emailError = formState.email ? \"\" : \"Field can't be empty\";\r\n    // const pw1Error = formState.password1 ? \"\" : \"Field can't be empty\";\r\n    // const pw2Error = formState.password2 ? \"\" : \"Field can't be empty\";\r\n\r\n    // const handleSignUp = () => {\r\n    //     if (false) {\r\n    //         alert(\"Введите текст\");\r\n    //     } else {\r\n    //         API.registration(registrationFormState.email.value, registrationFormState.password.value)\r\n    //             .then((res: any) => {\r\n    //                 console.log(`User ${res.data.addedUser.email} successfully signed up`)\r\n    //                 setSuccessfulRegistration(true)\r\n    //\r\n    //             })\r\n    //             .catch((error) => {\r\n    //                 setRegistrationFormState({...registrationFormState, errorResponse: error.response.data.error})\r\n    //             })\r\n    //     }\r\n    // };\r\n\r\n\r\n    // const onChangeHandler = (field: 'email' | 'password') => (value: string) => {\r\n    //     setRegistrationFormState({\r\n    //         ...registrationFormState, [field]:\r\n    //             {\r\n    //                 ...registrationFormState[field],\r\n    //                 value: value.trim(),\r\n    //                 error: registrationFormState[field].touched ? inputValidator(value, field) : ''\r\n    //             }\r\n    //     })\r\n    // }\r\n\r\n    const onRegistrationInputsChangeHandler = (field: 'email' | 'password' | 'password2') =>\r\n        (value: string) => {\r\n            setRegistrationFormState({\r\n                ...registrationFormState,\r\n                [field]:\r\n                    {\r\n                        ...registrationFormState[field],\r\n                        value: value.trim(),\r\n                        error: registrationFormState[field].touched ?\r\n                            registrationInputValidator(field, value, registrationFormState.password.value)\r\n                            : ''\r\n                    }, // исправить проверку password2\r\n            })\r\n        }\r\n\r\n    // const onPassword2ChangeHandler = (field: 'password2' ) => (value: string) => {\r\n    //     setRegistrationFormState({\r\n    //         ...registrationFormState, [field]:\r\n    //             {\r\n    //                 ...registrationFormState[field],\r\n    //                 value: value.trim(),\r\n    //                 error: registrationFormState[field].touched ? password2Validator(value, field) : ''\r\n    //             }\r\n    //     })\r\n    // }\r\n\r\n    const onBlurHandler = (field: 'email' | 'password') => (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setRegistrationFormState({\r\n            ...registrationFormState, [field]:\r\n                {\r\n                    ...registrationFormState[field],\r\n                    error: registrationFormState[field].value ?\r\n                        registrationInputValidator(field, e.target.value, registrationFormState.password.value)\r\n                        : 'Required field',\r\n                    touched: true\r\n                }\r\n        })\r\n    }\r\n\r\n    const onSubmitHandler = (email: string, password: string) => {\r\n        // alert(`email: ${email}\\npw: ${password}`)\r\n        dispatch(registrationTC(email, password))\r\n    }\r\n\r\n    // const setSuccessfulRegistration = (val: boolean) => {\r\n    //     setRegistrationFormState({...registrationFormState, successfullyRegistered: val})\r\n    // }\r\n\r\n\r\n    return (\r\n        isSuccessfullyRegistered\r\n            ?\r\n            <Redirect to={'profile'}/>\r\n        : <Registration2\r\n            registrationFormState={registrationFormState}\r\n            onChangeHandler={onRegistrationInputsChangeHandler}\r\n            onBlurHandler={onBlurHandler}\r\n            onSubmitHandler={onSubmitHandler}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default RegistrationContainer;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport style from '../styles/PacksPage.module.css'\r\nimport {CardType} from '../../api/API';\r\nimport {useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\n\r\ntype CardItemPropsType = {\r\n    deleteCallback(): void\r\n    updateCallback(): void\r\n}\r\n\r\nfunction CardItem(props: CardType & CardItemPropsType) {\r\n\r\n    const myId = useSelector((state: RootStateType) => state.auth.profile?._id)\r\n    const itemIsMine = props.user_id === myId\r\n\r\n    const updated = new Date(props.updated)\r\n        .toLocaleDateString(\"en-UE\", {hour12: false, hour: 'numeric', minute: 'numeric'});\r\n\r\n    const created = new Date(props.created)\r\n        .toLocaleDateString(\"en-UE\", {hour12: false, hour: 'numeric', minute: 'numeric'});\r\n\r\n    return (\r\n        <li>\r\n            <div className={`${style.packItem}${itemIsMine? '' : (' ' + style.itemIsNotMine)}`}>\r\n                <div style={{width: '15%'}}>{props.question}</div>\r\n                <div style={{width: '10%'}}>{props.answer}</div>\r\n                <div style={{width: '15%'}}>\r\n                    {Math.round((props.grade + Number.EPSILON) * 100) / 100}</div>\r\n                <div style={{width: '10%', fontSize: '12px'}}>{updated}</div>\r\n                <div style={{width: '10%', fontSize: '12px'}}>{created}</div>\r\n                <div style={{width: '15%'}}>\r\n                    <button disabled={!itemIsMine}\r\n                            onClick={props.deleteCallback}>Delete</button>\r\n                    <button style={{marginLeft: '5px'}}\r\n                            disabled={!itemIsMine}\r\n                            onClick={props.updateCallback}>Update</button>\r\n                </div>\r\n                <div style={{width: '25%'}}/>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default CardItem;\r\n","import React from 'react';\r\nimport style from '../styles/CardsPage.module.css'\r\nimport {CardType} from '../../api/API';\r\nimport CardItem from './CardItem';\r\nimport SearchContainer from '../../common/SearchComponent/SearchContainer';\r\nimport PaginationContainer from '../../common/Pagination/PaginationContainer';\r\nimport {useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\n\r\ntype PacksPagePropsType = {\r\n    cards: Array<CardType>\r\n    packId: string\r\n    totalCardsCount: number\r\n    createCard(packId: string): void // fix args\r\n    deleteCard(packId: string, cardId: string): void\r\n    updateCard(packId: string, cardId: string): void\r\n}\r\n\r\nexport type AddCardFormStateType = {\r\n    value: string\r\n    error: string\r\n    hide: boolean\r\n    touched: boolean\r\n}\r\n\r\nfunction CardsPage(props: PacksPagePropsType) {\r\n    console.log('CardsPage called')\r\n\r\n    const filter = useSelector((state: RootStateType): string => state.searchValue.searchValue)\r\n    const pack = useSelector((state: RootStateType) => state.packsPage.packs.find(p => p._id === props.packId))\r\n    const title = pack? pack.name : 'Pack'\r\n\r\n    const cards = props.cards.filter(c => filter? c.question.includes(filter) : true)\r\n        .map(c => {\r\n        return <CardItem {...c}\r\n                         key={c._id}\r\n                         deleteCallback={() => props.deleteCard(props.packId, c._id)}\r\n                         updateCallback={() => props.updateCard(props.packId, c._id)}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div className={style.packsPageWrapper}>\r\n            <h1 style={{alignSelf: 'center'}}>{title}</h1>\r\n            <div style={{display: 'flex',\r\n                flexDirection: 'row',\r\n                justifyContent: 'space-between',\r\n                width: '100%'}}>\r\n                <div style={{alignSelf: 'flex-start', marginBottom: '5px'}}>\r\n                    <SearchContainer/>\r\n                </div>\r\n                <div style={{alignSelf: 'flex-end', marginBottom: '5px'}}>\r\n                    <PaginationContainer totalItems={props.totalCardsCount}/>\r\n                </div>\r\n            </div>\r\n            <div className={style.table}>\r\n                <div className={style.tableHeader}>\r\n                    <div style={{width: '15%'}}>Question</div>\r\n                    <div style={{width: '10%'}}>Answer</div>\r\n                    <div style={{width: '15%'}}>Grade</div>\r\n                    <div style={{width: '10%'}}>Updated</div>\r\n                    <div style={{width: '10%'}}>Created</div>\r\n                    <div style={{width: '15%'}}>\r\n                        <button onClick={() => props.createCard(props.packId)}>New card</button>\r\n                    </div>\r\n                    <div style={{width: '25%'}}/>\r\n                </div>\r\n                <ul>\r\n                    {cards}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardsPage;\r\n","import {CardType, cardsAPI} from '../api/API';\r\nimport {setAppStatusAC} from './app-reducer';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {RootStateType} from './store';\r\nimport {Action} from 'redux';\r\nimport {setAuthTC} from './auth-reducer';\r\n\r\ntype PageStateType = {\r\n    packTitle: string\r\n    cards: Array<CardType>\r\n    totalCardsCount: number\r\n    itemsPerPage: number\r\n    currentPage: number\r\n    params: GetCardsParamsType\r\n}\r\n\r\nexport type GetCardsParamsType = {\r\n    cardName?: string\r\n    min?: number\r\n    max?: number\r\n    page: number\r\n    pageCount: number\r\n    sortCards: '1grade' | '0grade'\r\n}\r\n\r\nconst initialState: PageStateType = {\r\n    packTitle: 'Pack',\r\n    cards: [],\r\n    totalCardsCount: 0,\r\n    itemsPerPage: 5,\r\n    currentPage: 1,\r\n    params: {\r\n        page: 1,\r\n        pageCount: 10,\r\n        sortCards: '1grade',\r\n    }\r\n}\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setItemsPerPageAC>\r\n    | ReturnType<typeof setTotalCardsCountAC>\r\n    | ReturnType<typeof setPackTitleAC>\r\n\r\n\r\nexport const cardsReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SET-CARDS':\r\n            return {...state, cards: action.cards}\r\n\r\n        case 'SET-PACK-TITLE':\r\n            return {...state, packTitle: action.title}\r\n\r\n        case 'SET-CURRENT-PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case 'SET-ITEMS-PER-PAGE':\r\n            return {...state, itemsPerPage: action.itemsPerPage}\r\n\r\n        case 'SET-TOTAL-CARDS-COUNT':\r\n            return {...state, totalCardsCount: action.totalCardsCount}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst SET_CARDS = 'SET-CARDS'\r\nconst SET_PACK_TITLE = 'SET-PACK-TITLE'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_ITEMS_PER_PAGE = 'SET-ITEMS-PER-PAGE'\r\nconst SET_TOTAL_CARDS_COUNT = 'SET-TOTAL-CARDS-COUNT'\r\n\r\nexport const setCardsAC = (cards: Array<CardType>) => (\r\n    {type: SET_CARDS, cards} as const\r\n)\r\nexport const setPackTitleAC = (title: string) => (\r\n    {type: SET_PACK_TITLE, title} as const\r\n)\r\nexport const setCurrentPageAC = (currentPage: number) => (\r\n    {type: SET_CURRENT_PAGE, currentPage} as const\r\n)\r\nexport const setItemsPerPageAC = (itemsPerPage: number) => (\r\n    {type: SET_ITEMS_PER_PAGE, itemsPerPage} as const\r\n)\r\nexport const setTotalCardsCountAC = (totalCardsCount: number) => (\r\n    {type: SET_TOTAL_CARDS_COUNT, totalCardsCount} as const\r\n)\r\n\r\n\r\n// Thunks\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    RootStateType,\r\n    unknown,\r\n    Action<string>>\r\n\r\nexport const getCardsTC = (packId: string):AppThunk =>\r\n    (dispatch, getState) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const params = getState().pagination\r\n    cardsAPI.getCards(packId, {...params, sortCards: '1grade'})\r\n        .then((response) => {\r\n            dispatch(setCardsAC(response.cards))\r\n            dispatch(setTotalCardsCountAC(response.cardsTotalCount))\r\n        })\r\n        .catch(e => {\r\n            console.log(e)\r\n            dispatch(setAuthTC())\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n\r\nexport const createCardTC = (packId: string):AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.createCard({question: 'New Card', cardsPack_id: packId})\r\n        .then(() => dispatch(getCardsTC(packId)))\r\n        .catch(e => {\r\n            console.log(e)\r\n            dispatch(setAuthTC())\r\n        })\r\n        .finally(() => {dispatch(setAppStatusAC('idle'))})\r\n}\r\n\r\nexport const deleteCardTC = (packId: string, cardId: string):AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.deleteCard(cardId)\r\n        .then(() => dispatch(getCardsTC(packId)))\r\n        .catch(e => {\r\n            console.log(e)\r\n            dispatch(setAuthTC())\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n// fix newName\r\nexport const updateCardTC = (packId: string, cardId: string, update?: string):AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.updateCard(cardId)\r\n        .then(() => dispatch(getCardsTC(packId)))\r\n        .catch(e => {\r\n            console.log(e)\r\n            dispatch(setAuthTC())\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}","import React, {useEffect} from 'react';\r\nimport CardsPage from './CardsPage';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {createCardTC, deleteCardTC, getCardsTC, updateCardTC} from '../../redux/cards-reducer';\r\n\r\ntype ParamsType = {\r\n    id: string | undefined\r\n}\r\n\r\nfunction CardsPageContainer() {\r\n    console.log('CardsPageContainer called')\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType): boolean => state.auth.isLoggedIn)\r\n    const page = useSelector((state: RootStateType): number => state.pagination.page)\r\n    const pageCount = useSelector((state: RootStateType): number => state.pagination.pageCount)\r\n\r\n    const params: ParamsType = useParams()\r\n    const packId = params.id ? params.id : ''\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(packId))\r\n    }, [dispatch, packId, page, pageCount])\r\n\r\n    const cards = useSelector((state: RootStateType) => state.cardsPage.cards)\r\n    const totalCardsCount = useSelector((state: RootStateType) => state.cardsPage.totalCardsCount)\r\n    const itemsOnPage = useSelector((state: RootStateType) => state.pagination.pageCount)\r\n\r\n    const pagesCount = Math.ceil(totalCardsCount / itemsOnPage)\r\n\r\n    const pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) pages.push(i)\r\n\r\n    const createCard = (id: string) => { // fix args\r\n        dispatch(createCardTC(id))\r\n    }\r\n\r\n    const deleteCard = (packId: string, cardId: string) => {\r\n        dispatch(deleteCardTC(packId, cardId))\r\n    }\r\n\r\n    const updateCard = (packId: string, cardId: string) => {\r\n        dispatch(updateCardTC(packId, cardId))\r\n    }\r\n\r\n    return (\r\n        !isLoggedIn\r\n            ? <Redirect to={'/login'}/>\r\n            : <CardsPage\r\n                cards={cards}\r\n                packId={packId}\r\n                createCard={createCard}\r\n                deleteCard={deleteCard}\r\n                updateCard={updateCard}\r\n                totalCardsCount={totalCardsCount}\r\n            />\r\n    )\r\n}\r\n\r\nexport default CardsPageContainer;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport style from '../styles/PacksPage.module.css'\r\nimport {GetPacksResponseType} from '../../api/API';\r\nimport {useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../redux/store';\r\n\r\ntype PackItemPropsType = {\r\n    deleteCallback(): void\r\n    updateCallback(): void\r\n}\r\n\r\nfunction PackItem(props: GetPacksResponseType & PackItemPropsType) {\r\n\r\n    const myId = useSelector((state: RootStateType) => state.auth.profile?._id)\r\n    const itemIsMine = props.user_id === myId\r\n\r\n    const updated = new Date(props.updated)\r\n        .toLocaleDateString(\"en-UE\", {hour12: false, hour: 'numeric', minute: 'numeric'});\r\n\r\n    const created = new Date(props.created)\r\n        .toLocaleDateString(\"en-UE\", {hour12: false, hour: 'numeric', minute: 'numeric'});\r\n\r\n    return (\r\n        <li>\r\n            <div className={`${style.packItem}${itemIsMine? '' : (' ' + style.itemIsNotMine)}`}>\r\n                <div style={{width: '15%'}}>{props.name}</div>\r\n                <div style={{width: '10%'}}>{props.cardsCount}</div>\r\n                <div style={{width: '20%', fontSize: '12px', color: 'gray'}}>{props.user_name}</div>\r\n                <div style={{width: '10%', fontSize: '12px'}}>{updated}</div>\r\n                <div style={{width: '10%', fontSize: '12px'}}>{created}</div>\r\n                <div style={{width: '15%'}}>\r\n                    <button disabled={!itemIsMine}\r\n                            onClick={props.deleteCallback}>Delete</button>\r\n                    <button style={{marginLeft: '5px'}}\r\n                            disabled={!itemIsMine}\r\n                            onClick={props.updateCallback}>Update</button>\r\n                </div>\r\n                <div style={{width: '20%'}}>\r\n                    <NavLink to={`/cards/${props._id}`}>cards</NavLink>\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default PackItem;\r\n","import React, {FormEvent, useEffect, useState} from 'react';\r\nimport style from '../styles/PacksPage.module.css'\r\nimport {GetPacksResponseType} from '../../api/API';\r\nimport PackItem from './PackItem';\r\nimport SuperInputText from '../../common/SuperInputText/SuperInputText';\r\nimport PaginationContainer from '../../common/Pagination/PaginationContainer';\r\nimport SearchContainer from '../../common/SearchComponent/SearchContainer';\r\nimport {RootStateType} from '../../redux/store';\r\nimport {useSelector} from 'react-redux';\r\n\r\ntype PacksPagePropsType = {\r\n    packs: Array<GetPacksResponseType>\r\n    totalPacksCount: number\r\n    createPack(name: string): void\r\n    deletePack(id: string): void\r\n    updatePack(id: string): void\r\n}\r\n\r\nexport type AddPackFormStateType = {\r\n    value: string\r\n    error: string\r\n    hide: boolean\r\n    touched: boolean\r\n}\r\n\r\nfunction PacksPage(props: PacksPagePropsType) {\r\n    console.log('CardsPage called')\r\n\r\n    let [formState, setFormState] =\r\n        useState<AddPackFormStateType>({value: '', error: '', hide: true, touched: false})\r\n\r\n    let [isMine, setIsMine] = useState(false)\r\n\r\n    const filter = useSelector((state: RootStateType): string => state.searchValue.searchValue)\r\n    const myId = useSelector((state: RootStateType) => state.auth.profile?._id)\r\n\r\n    const onChangeHandler = (value: string) => {\r\n\r\n        setFormState({\r\n            ...formState,\r\n            value: value.trim(),\r\n        })\r\n    }\r\n    const onBlurHandler = (e: React.FocusEvent<HTMLInputElement>) => {\r\n\r\n        setFormState({\r\n            ...formState,\r\n            touched: true\r\n        })\r\n    }\r\n    const toggleHideInput = (hide: boolean) => {\r\n\r\n        setFormState({\r\n            ...formState,\r\n            hide\r\n        })\r\n    }\r\n\r\n    let packs = props.packs.filter(p => filter ? p.name.includes(filter) : true)\r\n    if (isMine) packs = packs.filter(p => p.user_id === myId)\r\n\r\n    const packsRender = packs.map(p => {\r\n        return <PackItem {...p}\r\n                         key={p._id}\r\n                         deleteCallback={() => props.deletePack(p._id)}\r\n                         updateCallback={() => props.updatePack(p._id)}\r\n        />\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (formState.touched && !formState.value) {\r\n            setFormState({...formState, error: 'Required'})\r\n        } else {\r\n            setFormState({...formState, error: ''})\r\n        }\r\n    }, [formState.value, formState.touched])\r\n\r\n    const onSubmitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        setFormState({\r\n            ...formState,\r\n            touched: true\r\n        })\r\n        if (formState.value) {\r\n            props.createPack(formState.value)\r\n            toggleHideInput(true)\r\n        } else if (formState.touched) {\r\n            toggleHideInput(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.packsPageWrapper}>\r\n            <h1 style={{alignSelf: 'center'}}>Packs</h1>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                justifyContent: 'space-between',\r\n                width: '100%'\r\n            }}>\r\n                <div style={{alignSelf: 'flex-start', marginBottom: '5px'}}>\r\n                    <SearchContainer/>\r\n                    <input type=\"checkbox\"\r\n                           checked={isMine}\r\n                           onChange={() => setIsMine(!isMine)}\r\n                    />\r\n                    <span style={{fontSize: '12px', marginLeft: '2px', color: 'gray'}}>Show mine</span>\r\n                </div>\r\n                <div style={{alignSelf: 'flex-end', marginBottom: '5px'}}>\r\n                    <PaginationContainer totalItems={props.totalPacksCount}/>\r\n                </div>\r\n            </div>\r\n            <div className={style.table}>\r\n                <div className={style.tableHeader}>\r\n                    <div style={{width: '15%'}}>Name</div>\r\n                    <div style={{width: '10%'}}>Cards count</div>\r\n                    <div style={{width: '20%'}}>User</div>\r\n                    <div style={{width: '10%'}}>Updated</div>\r\n                    <div style={{width: '10%'}}>Created</div>\r\n                    <div style={{width: '15%'}}>\r\n                        {formState.hide\r\n                            ? <button onClick={() => toggleHideInput(false)}>Add</button>\r\n                            : <form className={style.inputBlock} onSubmit={onSubmitHandler}>\r\n                                <button type='submit'>Add</button>\r\n                                <SuperInputText\r\n                                    value={formState.value}\r\n                                    error={formState.error}\r\n                                    onChangeText={onChangeHandler}\r\n                                    onBlur={onBlurHandler}\r\n                                    placeholder={'Pack name'}\r\n                                />\r\n                                <span onClick={() => toggleHideInput(true)}>x</span>\r\n                            </form>}\r\n                    </div>\r\n                    <div style={{width: '20%'}}/>\r\n                </div>\r\n                <ul>\r\n                    {packsRender}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PacksPage;\r\n","import {GetPacksResponseType, packsAPI} from '../api/API';\r\nimport {setAppStatusAC} from './app-reducer';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {RootStateType} from './store';\r\nimport {Action} from 'redux';\r\nimport {setAuthTC} from './auth-reducer';\r\n\r\ntype PageStateType = {\r\n    packs: Array<GetPacksResponseType>\r\n    totalPacksCount: number\r\n    currentPage: number\r\n    params: GetPacksParamsType\r\n}\r\n\r\nexport type GetPacksParamsType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    page: number\r\n    pageCount: number\r\n    sortPacks: '1created' | '0created' | '1updated' | '0updated'\r\n}\r\n\r\nconst initialState: PageStateType = {\r\n    packs: [],\r\n    totalPacksCount: 0,\r\n    currentPage: 1,\r\n    params: {\r\n        page: 1,\r\n        pageCount: 10,\r\n        sortPacks: '0updated',\r\n    }\r\n}\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setTotalPacksCountAC>\r\n\r\n\r\nexport const packsReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SET-PACKS':\r\n            return {...state, packs: action.packs}\r\n\r\n        case 'SET-CURRENT-PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case 'SET-TOTAL-PACKS-COUNT':\r\n            return {...state, totalPacksCount: action.totalPacksCount}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst SET_PACKS = 'SET-PACKS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_PACKS_COUNT = 'SET-TOTAL-PACKS-COUNT'\r\n\r\nexport const setPacksAC = (packs: Array<GetPacksResponseType>) => (\r\n    {type: SET_PACKS, packs} as const\r\n)\r\nexport const setCurrentPageAC = (currentPage: number) => (\r\n    {type: SET_CURRENT_PAGE, currentPage} as const\r\n)\r\nexport const setTotalPacksCountAC = (totalPacksCount: number) => (\r\n    {type: SET_TOTAL_PACKS_COUNT, totalPacksCount} as const\r\n)\r\n\r\n// Thunks\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    RootStateType,\r\n    unknown,\r\n    Action<string>>\r\n\r\nexport const getPacksTC = (): AppThunk =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const params = getState().pagination\r\n        packsAPI.getPacks({...params, sortPacks: '0updated'})\r\n            .then((response) => {\r\n                dispatch(setPacksAC(response.cardPacks))\r\n                dispatch(setTotalPacksCountAC(response.cardPacksTotalCount))\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n                dispatch(setAuthTC())\r\n            })\r\n            .finally(() => dispatch(setAppStatusAC('idle')))\r\n    }\r\n\r\nexport const createPackTC = (name: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.createPack(name)\r\n        .then(() => dispatch(getPacksTC()))\r\n        .catch(e => {\r\n            console.log(e)\r\n            dispatch(setAuthTC())\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n\r\nexport const deletePackTC = (id: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.deletePack(id)\r\n        .then(() => dispatch(getPacksTC()))\r\n        .catch(e => {\r\n            console.log(e)\r\n            dispatch(setAuthTC())\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}\r\n// fix newName\r\nexport const updatePackTC = (id: string, newName?: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.updatePack(id, 'UPDATED Pack')\r\n        .then(() => dispatch(getPacksTC()))\r\n        .catch(e => {\r\n            console.log(e)\r\n            dispatch(setAuthTC())\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('idle')))\r\n}","import React, {useEffect} from 'react';\r\nimport PacksPage from './PacksPage';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {createPackTC, deletePackTC, getPacksTC, updatePackTC} from '../../redux/packs-reducer';\r\nimport {RootStateType} from '../../redux/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport PaginationContainer from '../../common/Pagination/PaginationContainer';\r\n\r\n\r\nfunction PacksPageContainer() {\r\n    console.log('PacksPageContainer called')\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: RootStateType): boolean => state.auth.isLoggedIn)\r\n    const page = useSelector((state: RootStateType): number => state.pagination.page)\r\n    const pageCount = useSelector((state: RootStateType): number => state.pagination.pageCount)\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n    }, [dispatch, page, pageCount])\r\n\r\n    const packs = useSelector((state: RootStateType) => state.packsPage.packs)\r\n    const totalPacksCount = useSelector((state: RootStateType) => state.packsPage.totalPacksCount)\r\n    const itemsOnPage = useSelector((state: RootStateType) => state.pagination.pageCount)\r\n\r\n    const pagesCount = Math.ceil(totalPacksCount / itemsOnPage)\r\n\r\n    const pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) pages.push(i)\r\n\r\n    const createPack = (name: string) => {\r\n        dispatch(createPackTC(name))\r\n    }\r\n\r\n    const deletePack = (id: string) => {\r\n        dispatch(deletePackTC(id))\r\n    }\r\n\r\n    const updatePack = (id: string) => {\r\n        dispatch(updatePackTC(id))\r\n    }\r\n\r\n    return (\r\n        !isLoggedIn\r\n            ? <Redirect to={'/login'}/>\r\n            : <PacksPage\r\n                packs={packs}\r\n                createPack={createPack}\r\n                deletePack={deletePack}\r\n                updatePack={updatePack}\r\n                totalPacksCount={totalPacksCount}\r\n            />\r\n    )\r\n}\r\n\r\nexport default PacksPageContainer;\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from '../styles/Page404.module.css'\r\n\r\nfunction Page404() {\r\n    return (\r\n        <div className={style.page404}>\r\n            <h1>Page not found</h1>\r\n            <NavLink to={'/'}><span>Back to homepage</span></NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Page404;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport style from './App.module.css';\r\nimport {HashRouter, Route, Switch, Redirect} from 'react-router-dom';\r\nimport Profile from './content/Profile/Profile';\r\nimport Registration from './content/Registration/Registration';\r\nimport {Navbar} from './common/Navbar';\r\nimport SuperInputsDemo from './content/SuperInputsDemo';\r\nimport LoginContainer from './content/Login/LoginContainer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport RecoverContainer from './content/Recover/RecoverContainer';\r\nimport NewPasswordContainer from './content/NewPassword/NewPasswordContainer';\r\nimport {setAuthTC} from './redux/auth-reducer';\r\nimport {RootStateType} from './redux/store';\r\nimport {Loader} from './common/loader/loader';\r\nimport RegistrationContainer from './content/Registration/RegistrationContainer';\r\nimport CardsPageContainer from './content/CardsPage/CardsPageContainer';\r\n\r\nimport PacksPageContainer from './content/PacksPage/PacksPageContainer';\r\nimport Page404 from \"./content/Page404/Page404\";\r\nexport const DEV_MODE = true\r\nexport const DEFAULT_EMAIL = 'nya-admin@nya.nya'\r\nexport const DEFAULT_PASSWORD = '1qazxcvBG'\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const appStatus = useSelector((state: RootStateType) => state.appState.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(setAuthTC())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                {appStatus === 'loading' && <Loader/>}\r\n                <Navbar/>\r\n                <div className={style.content}>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <Profile/>}/>\r\n                        <Route path='/login' render={() => <LoginContainer/>}/>\r\n                        <Route path='/registration2' render={() => <RegistrationContainer/>}/>\r\n                        <Route path='/profile' render={() => <Profile/>}/>\r\n                        <Route path='/recover' render={() => <RecoverContainer/>}/>\r\n                        <Route path='/set-new-password/:token?' render={() => <NewPasswordContainer/>}/>\r\n                        <Route path='/packs/' render={() => <PacksPageContainer/>}/>\r\n                        <Route path='/cards/:id?' render={() => <CardsPageContainer/>}/>\r\n                        <Route path='/demo' render={() => <SuperInputsDemo/>}/>\r\n\r\n                        {/*<Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>*/}\r\n                        <Route path={'/404'} render={() => <Page404/>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\"\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {authReducer} from './auth-reducer';\r\nimport {recoverReducer} from './recover-reducer';\r\nimport {registrationReducer} from './registration-reducer';\r\nimport {appReducer} from './app-reducer';\r\nimport {searchReducer} from \"./search-reducer\";\r\nimport {paginationReducer} from \"./pagination-reducer\";\r\nimport {packsReducer} from './packs-reducer';\r\nimport {cardsReducer} from './cards-reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    appState: appReducer,\r\n    auth: authReducer,\r\n    pageRecover: recoverReducer,\r\n    pageRegistration: registrationReducer,\r\n    searchValue: searchReducer,\r\n    pagination: paginationReducer,\r\n    packsPage: packsReducer,\r\n    cardsPage: cardsReducer\r\n})\r\n\r\n// let store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// вариант для работы с расширением (хрома) redux devtools:\r\n// @ts-ignore\r\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}